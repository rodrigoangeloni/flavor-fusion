<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    // Título comentado para mostrar solo el logo&#10;                    /*Text(&#10;                        text = &quot;Flavor Fusion&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                    )*/&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo personalizado&#10;//            Image(&#10;//                painter = painterResource(id = R.drawable.fusiondesabores), // Cambia &quot;logo_personalizado&quot; por el nombre de tu archivo PNG&#10;//                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;//                modifier = Modifier&#10;//                    .size(120.dp)&#10;//                    .align(Alignment.CenterHorizontally)&#10;//                    .padding(bottom = 16.dp),&#10;//                contentScale = ContentScale.Fit&#10;//            )&#10;&#10;            // Título de bienvenida&#10;            Text(&#10;                text = &quot;¡Menú Principal!&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                // Comida sugerida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Comida del Día&quot;,&#10;                        receta = comida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Bebida sugerida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Bebida del Día&quot;,&#10;                        receta = bebida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;&#10;                // Botones de navegación&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Botón explorar comidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarAComidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Comidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Botón explorar bebidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarABebidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Bebidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            estadoUI.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaSugerencia(&#10;    titulo: String,&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onRecetaClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = titulo,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onRecetaClick() }&#10;        ) {&#10;            Column {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = receta.imagen,&#10;                        contentDescription = receta.nombre,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Botón de favorito flotante&#10;                    IconButton(&#10;                        onClick = onFavoritoClick,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                                RoundedCornerShape(50)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.categoria,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.area,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = &quot;¡Menú Principal!&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                    )&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo personalizado&#10;//            Image(&#10;//                painter = painterResource(id = R.drawable.fusiondesabores), // Cambia &quot;logo_personalizado&quot; por el nombre de tu archivo PNG&#10;//                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;//                modifier = Modifier&#10;//                    .size(120.dp)&#10;//                    .align(Alignment.CenterHorizontally)&#10;//                    .padding(bottom = 16.dp),&#10;//                contentScale = ContentScale.Fit&#10;//            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                // Comida sugerida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Comida del Día&quot;,&#10;                        receta = comida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Bebida sugerida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Bebida del Día&quot;,&#10;                        receta = bebida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;&#10;                // Botones de navegación&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Botón explorar comidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarAComidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Comidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Botón explorar bebidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarABebidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Bebidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            estadoUI.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaSugerencia(&#10;    titulo: String,&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onRecetaClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = titulo,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onRecetaClick() }&#10;        ) {&#10;            Column {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = receta.imagen,&#10;                        contentDescription = receta.nombre,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Botón de favorito flotante&#10;                    IconButton(&#10;                        onClick = onFavoritoClick,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                                RoundedCornerShape(50)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.categoria,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.area,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>