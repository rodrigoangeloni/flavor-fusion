<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.kapt)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.rodrigoangeloni.flavorfusion&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.rodrigoangeloni.flavorfusion&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = true&#10;            isShrinkResources = true&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;) // Cambiar por signing config de producción&#10;        }&#10;        debug {&#10;            isDebuggable = true&#10;            applicationIdSuffix = &quot;.debug&quot;&#10;            versionNameSuffix = &quot;-debug&quot;&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.hilt.compiler)&#10;&#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    kapt(libs.androidx.room.compiler)&#10;    implementation(libs.androidx.room.ktx)&#10;&#10;    // Retrofit &amp; Gson&#10;    implementation(libs.retrofit)&#10;    implementation(libs.converter.gson)&#10;    implementation(libs.gson)&#10;&#10;    // Coil&#10;    implementation(libs.coil.compose)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;&#10;    // Material Icons Extended - Más iconos&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;&#10;    // ML Kit para traducción&#10;    implementation(&quot;com.google.mlkit:translate:17.0.2&quot;)&#10;}&#10;&#10;kapt {&#10;    correctErrorTypes = true&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    alias(libs.plugins.hilt.android)&#10;    alias(libs.plugins.kotlin.kapt)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.rodrigoangeloni.flavorfusion&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.rodrigoangeloni.flavorfusion&quot;&#10;        minSdk = 24&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = true&#10;            isShrinkResources = true&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;            signingConfig = signingConfigs.getByName(&quot;debug&quot;) // Cambiar por signing config de producción&#10;        }&#10;        debug {&#10;            isDebuggable = true&#10;            applicationIdSuffix = &quot;.debug&quot;&#10;            versionNameSuffix = &quot;-debug&quot;&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;        buildConfig = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.1&quot;&#10;    }&#10;    packaging {&#10;        resources {&#10;            excludes += &quot;/META-INF/{AL2.0,LGPL2.1}&quot;&#10;        }&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.androidx.ui.graphics)&#10;    implementation(libs.androidx.ui.tooling.preview)&#10;    implementation(libs.androidx.material3)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;&#10;    // Hilt&#10;    implementation(libs.hilt.android)&#10;    kapt(libs.hilt.compiler)&#10;&#10;    // Room&#10;    implementation(libs.androidx.room.runtime)&#10;    kapt(libs.androidx.room.compiler)&#10;    implementation(libs.androidx.room.ktx)&#10;&#10;    // Retrofit &amp; Gson&#10;    implementation(libs.retrofit)&#10;    implementation(libs.converter.gson)&#10;    implementation(libs.gson)&#10;&#10;    // Coil&#10;    implementation(libs.coil.compose)&#10;&#10;    // Navigation&#10;    implementation(libs.androidx.navigation.compose)&#10;    implementation(libs.androidx.hilt.navigation.compose)&#10;&#10;    // Material Icons Extended - Más iconos&#10;    implementation(&quot;androidx.compose.material:material-icons-extended:1.5.4&quot;)&#10;&#10;    // ML Kit para traducción&#10;    implementation(&quot;com.google.mlkit:translate:17.0.2&quot;)&#10;&#10;    // Google Play Services Tasks para soporte de await()&#10;    implementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.7.1&quot;)&#10;}&#10;&#10;kapt {&#10;    correctErrorTypes = true&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/di/AppModule.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.rodrigoangeloni.flavorfusion.database.BaseDeDatos&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioBebidas&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Qualifier&#10;import javax.inject.Singleton&#10;&#10;@Qualifier&#10;@Retention(AnnotationRetention.BINARY)&#10;annotation class MealRetrofit&#10;&#10;@Qualifier&#10;@Retention(AnnotationRetention.BINARY)&#10;annotation class DrinkRetrofit&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    // Retrofit para comidas (TheMealDB)&#10;    @Provides&#10;    @Singleton&#10;    @MealRetrofit&#10;    fun provideMealRetrofit(): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;https://www.themealdb.com/api/json/v1/1/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    // Retrofit para bebidas (TheCocktailDB)&#10;    @Provides&#10;    @Singleton&#10;    @DrinkRetrofit&#10;    fun provideDrinkRetrofit(): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;https://www.thecocktaildb.com/api/json/v1/1/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    // Servicio API para comidas&#10;    @Provides&#10;    @Singleton&#10;    fun provideServicioAPI(@MealRetrofit retrofit: Retrofit): ServicioAPI {&#10;        return retrofit.create(ServicioAPI::class.java)&#10;    }&#10;&#10;    // Servicio API para bebidas&#10;    @Provides&#10;    @Singleton&#10;    fun provideServicioBebidas(@DrinkRetrofit retrofit: Retrofit): ServicioBebidas {&#10;        return retrofit.create(ServicioBebidas::class.java)&#10;    }&#10;&#10;    // Proveer base de datos&#10;    @Provides&#10;    @Singleton&#10;    fun provideBaseDeDatos(@ApplicationContext context: Context): BaseDeDatos {&#10;        return BaseDeDatos.getDatabase(context)&#10;    }&#10;&#10;    // Proveer DAO&#10;    @Provides&#10;    fun provideRecetaDao(baseDeDatos: BaseDeDatos): RecetaDao {&#10;        return baseDeDatos.recetaDao()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.di&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import androidx.room.Room&#13;&#10;import com.rodrigoangeloni.flavorfusion.database.BaseDeDatos&#13;&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#13;&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#13;&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioBebidas&#13;&#10;import dagger.Module&#13;&#10;import dagger.Provides&#13;&#10;import dagger.hilt.InstallIn&#13;&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#13;&#10;import dagger.hilt.components.SingletonComponent&#13;&#10;import retrofit2.Retrofit&#13;&#10;import retrofit2.converter.gson.GsonConverterFactory&#13;&#10;import javax.inject.Qualifier&#13;&#10;import javax.inject.Singleton&#13;&#10;&#13;&#10;@Qualifier&#13;&#10;@Retention(AnnotationRetention.BINARY)&#13;&#10;annotation class MealRetrofit&#13;&#10;&#13;&#10;@Qualifier&#13;&#10;@Retention(AnnotationRetention.BINARY)&#13;&#10;annotation class DrinkRetrofit&#13;&#10;&#13;&#10;@Module&#13;&#10;@InstallIn(SingletonComponent::class)&#13;&#10;object AppModule {&#13;&#10;&#13;&#10;    // Retrofit para comidas (TheMealDB)&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    @MealRetrofit&#13;&#10;    fun provideMealRetrofit(): Retrofit {&#13;&#10;        return Retrofit.Builder()&#13;&#10;            .baseUrl(&quot;https://www.themealdb.com/api/json/v1/1/&quot;)&#13;&#10;            .addConverterFactory(GsonConverterFactory.create())&#13;&#10;            .build()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Retrofit para bebidas (TheCocktailDB)&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    @DrinkRetrofit&#13;&#10;    fun provideDrinkRetrofit(): Retrofit {&#13;&#10;        return Retrofit.Builder()&#13;&#10;            .baseUrl(&quot;https://www.thecocktaildb.com/api/json/v1/1/&quot;)&#13;&#10;            .addConverterFactory(GsonConverterFactory.create())&#13;&#10;            .build()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Servicio API para comidas&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    fun provideServicioAPI(@MealRetrofit retrofit: Retrofit): ServicioAPI {&#13;&#10;        return retrofit.create(ServicioAPI::class.java)&#13;&#10;    }&#13;&#10;&#13;&#10;    // Servicio API para bebidas&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    fun provideServicioBebidas(@DrinkRetrofit retrofit: Retrofit): ServicioBebidas {&#13;&#10;        return retrofit.create(ServicioBebidas::class.java)&#13;&#10;    }&#13;&#10;&#13;&#10;    // Proveer base de datos&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    fun provideBaseDeDatos(@ApplicationContext context: Context): BaseDeDatos {&#13;&#10;        return BaseDeDatos.getDatabase(context)&#13;&#10;    }&#13;&#10;&#13;&#10;    // Proveer DAO&#13;&#10;    @Provides&#13;&#10;    fun provideRecetaDao(baseDeDatos: BaseDeDatos): RecetaDao {&#13;&#10;        return baseDeDatos.recetaDao()&#13;&#10;    }&#13;&#10;    &#13;&#10;    // Proveer servicio de traducción&#13;&#10;    @Provides&#13;&#10;    @Singleton&#13;&#10;    fun provideServicioTraduccion(): com.rodrigoangeloni.flavorfusion.util.ServicioTraduccion {&#13;&#10;        return com.rodrigoangeloni.flavorfusion.util.ServicioTraduccion()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/repository/RecetasRepositorio.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/repository/RecetasRepositorio.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.repository&#10;&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.model.*&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioBebidas&#10;import com.rodrigoangeloni.flavorfusion.util.ServicioTraduccion&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class RecetasRepositorio @Inject constructor(&#10;    private val servicioAPI: ServicioAPI,&#10;    private val servicioBebidas: ServicioBebidas,&#10;    private val recetaDao: RecetaDao,&#10;    private val servicioTraduccion: ServicioTraduccion&#10;) {&#10;    &#10;    // Operaciones de API para comidas con traducción&#10;    suspend fun buscarComidas(query: String): MealResponse? {&#10;        return try {&#10;            val respuesta = servicioAPI.buscarComidas(query)&#10;            traducirRespuestaComidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerComidaAleatoria(): MealResponse? {&#10;        return try {&#10;            val respuesta = servicioAPI.obtenerComidaAleatoria()&#10;            traducirRespuestaComidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleComida(id: String): MealResponse? {&#10;        return try {&#10;            val respuesta = servicioAPI.obtenerDetalleComida(id)&#10;            traducirRespuestaComidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Operaciones de API para bebidas con traducción&#10;    suspend fun buscarBebidas(query: String): DrinkResponse? {&#10;        return try {&#10;            val respuesta = servicioBebidas.buscarBebidas(query)&#10;            traducirRespuestaBebidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerBebidaAleatoria(): DrinkResponse? {&#10;        return try {&#10;            val respuesta = servicioBebidas.obtenerBebidaAleatoria()&#10;            traducirRespuestaBebidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleBebida(id: String): DrinkResponse? {&#10;        return try {&#10;            val respuesta = servicioBebidas.obtenerDetalleBebida(id)&#10;            traducirRespuestaBebidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Métodos de traducción&#10;    private suspend fun traducirRespuestaComidas(respuesta: MealResponse?): MealResponse? {&#10;        if (respuesta?.meals == null) return respuesta&#10;        &#10;        val comidasTraducidas = respuesta.meals.map { comida -&gt;&#10;            comida.copy(&#10;                strMeal = servicioTraduccion.traducir(comida.strMeal),&#10;                strCategory = servicioTraduccion.traducirNullable(comida.strCategory),&#10;                strArea = servicioTraduccion.traducirNullable(comida.strArea),&#10;                strInstructions = servicioTraduccion.traducirNullable(comida.strInstructions),&#10;                // Traducir ingredientes&#10;                strIngredient1 = servicioTraduccion.traducirNullable(comida.strIngredient1),&#10;                strIngredient2 = servicioTraduccion.traducirNullable(comida.strIngredient2),&#10;                strIngredient3 = servicioTraduccion.traducirNullable(comida.strIngredient3),&#10;                strIngredient4 = servicioTraduccion.traducirNullable(comida.strIngredient4),&#10;                strIngredient5 = servicioTraduccion.traducirNullable(comida.strIngredient5),&#10;                strIngredient6 = servicioTraduccion.traducirNullable(comida.strIngredient6),&#10;                strIngredient7 = servicioTraduccion.traducirNullable(comida.strIngredient7),&#10;                strIngredient8 = servicioTraduccion.traducirNullable(comida.strIngredient8),&#10;                strIngredient9 = servicioTraduccion.traducirNullable(comida.strIngredient9),&#10;                strIngredient10 = servicioTraduccion.traducirNullable(comida.strIngredient10),&#10;                strIngredient11 = servicioTraduccion.traducirNullable(comida.strIngredient11),&#10;                strIngredient12 = servicioTraduccion.traducirNullable(comida.strIngredient12),&#10;                strIngredient13 = servicioTraduccion.traducirNullable(comida.strIngredient13),&#10;                strIngredient14 = servicioTraduccion.traducirNullable(comida.strIngredient14),&#10;                strIngredient15 = servicioTraduccion.traducirNullable(comida.strIngredient15),&#10;                strIngredient16 = servicioTraduccion.traducirNullable(comida.strIngredient16),&#10;                strIngredient17 = servicioTraduccion.traducirNullable(comida.strIngredient17),&#10;                strIngredient18 = servicioTraduccion.traducirNullable(comida.strIngredient18),&#10;                strIngredient19 = servicioTraduccion.traducirNullable(comida.strIngredient19),&#10;                strIngredient20 = servicioTraduccion.traducirNullable(comida.strIngredient20)&#10;            )&#10;        }&#10;        &#10;        return MealResponse(comidasTraducidas)&#10;    }&#10;    &#10;    private suspend fun traducirRespuestaBebidas(respuesta: DrinkResponse?): DrinkResponse? {&#10;        if (respuesta?.drinks == null) return respuesta&#10;        &#10;        val bebidasTraducidas = respuesta.drinks.map { bebida -&gt;&#10;            bebida.copy(&#10;                strDrink = servicioTraduccion.traducir(bebida.strDrink),&#10;                strCategory = servicioTraduccion.traducirNullable(bebida.strCategory),&#10;                strAlcoholic = servicioTraduccion.traducirNullable(bebida.strAlcoholic),&#10;                strGlass = servicioTraduccion.traducirNullable(bebida.strGlass),&#10;                strInstructions = servicioTraduccion.traducirNullable(bebida.strInstructions),&#10;                // Traducir ingredientes&#10;                strIngredient1 = servicioTraduccion.traducirNullable(bebida.strIngredient1),&#10;                strIngredient2 = servicioTraduccion.traducirNullable(bebida.strIngredient2),&#10;                strIngredient3 = servicioTraduccion.traducirNullable(bebida.strIngredient3),&#10;                strIngredient4 = servicioTraduccion.traducirNullable(bebida.strIngredient4),&#10;                strIngredient5 = servicioTraduccion.traducirNullable(bebida.strIngredient5),&#10;                strIngredient6 = servicioTraduccion.traducirNullable(bebida.strIngredient6),&#10;                strIngredient7 = servicioTraduccion.traducirNullable(bebida.strIngredient7),&#10;                strIngredient8 = servicioTraduccion.traducirNullable(bebida.strIngredient8),&#10;                strIngredient9 = servicioTraduccion.traducirNullable(bebida.strIngredient9),&#10;                strIngredient10 = servicioTraduccion.traducirNullable(bebida.strIngredient10),&#10;                strIngredient11 = servicioTraduccion.traducirNullable(bebida.strIngredient11),&#10;                strIngredient12 = servicioTraduccion.traducirNullable(bebida.strIngredient12),&#10;                strIngredient13 = servicioTraduccion.traducirNullable(bebida.strIngredient13),&#10;                strIngredient14 = servicioTraduccion.traducirNullable(bebida.strIngredient14),&#10;                strIngredient15 = servicioTraduccion.traducirNullable(bebida.strIngredient15)&#10;            )&#10;        }&#10;        &#10;        return DrinkResponse(bebidasTraducidas)&#10;    }&#10;&#10;    // Operaciones de favoritos&#10;    fun obtenerFavoritos(): Flow&lt;List&lt;Receta&gt;&gt; {&#10;        return recetaDao.obtenerTodosFavoritos()&#10;    }&#10;    &#10;    suspend fun esFavorito(id: String): Boolean {&#10;        return recetaDao.esFavorito(id)&#10;    }&#10;    &#10;    suspend fun agregarFavorito(receta: Receta) {&#10;        recetaDao.insertarFavorito(receta)&#10;    }&#10;    &#10;    suspend fun eliminarFavorito(id: String) {&#10;        recetaDao.eliminarFavoritoPorId(id)&#10;    }&#10;    &#10;    suspend fun alternarFavorito(receta: Receta) {&#10;        if (esFavorito(receta.id)) {&#10;            eliminarFavorito(receta.id)&#10;        } else {&#10;            agregarFavorito(receta)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.repository&#10;&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.model.*&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioBebidas&#10;import com.rodrigoangeloni.flavorfusion.util.ServicioTraduccion&#10;import kotlinx.coroutines.flow.Flow&#10;import kotlinx.coroutines.flow.map&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class RecetasRepositorio @Inject constructor(&#10;    private val servicioAPI: ServicioAPI,&#10;    private val servicioBebidas: ServicioBebidas,&#10;    private val recetaDao: RecetaDao,&#10;    private val servicioTraduccion: ServicioTraduccion&#10;) {&#10;    &#10;    // Operaciones de API para comidas con traducción&#10;    suspend fun buscarComidas(query: String): MealResponse? {&#10;        return try {&#10;            val respuesta = servicioAPI.buscarComidas(query)&#10;            traducirRespuestaComidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerComidaAleatoria(): MealResponse? {&#10;        return try {&#10;            val respuesta = servicioAPI.obtenerComidaAleatoria()&#10;            traducirRespuestaComidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleComida(id: String): MealResponse? {&#10;        return try {&#10;            val respuesta = servicioAPI.obtenerDetalleComida(id)&#10;            traducirRespuestaComidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Operaciones de API para bebidas con traducción&#10;    suspend fun buscarBebidas(query: String): DrinkResponse? {&#10;        return try {&#10;            val respuesta = servicioBebidas.buscarBebidas(query)&#10;            traducirRespuestaBebidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerBebidaAleatoria(): DrinkResponse? {&#10;        return try {&#10;            val respuesta = servicioBebidas.obtenerBebidaAleatoria()&#10;            traducirRespuestaBebidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleBebida(id: String): DrinkResponse? {&#10;        return try {&#10;            val respuesta = servicioBebidas.obtenerDetalleBebida(id)&#10;            traducirRespuestaBebidas(respuesta)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Métodos de traducción&#10;    private suspend fun traducirRespuestaComidas(respuesta: MealResponse?): MealResponse? {&#10;        if (respuesta?.meals == null) return respuesta&#10;        &#10;        val comidasTraducidas = respuesta.meals.map { comida -&gt;&#10;            comida.copy(&#10;                strMeal = servicioTraduccion.traducir(comida.strMeal),&#10;                strCategory = servicioTraduccion.traducirNullable(comida.strCategory),&#10;                strArea = servicioTraduccion.traducirNullable(comida.strArea),&#10;                strInstructions = servicioTraduccion.traducirNullable(comida.strInstructions),&#10;                // Traducir ingredientes&#10;                strIngredient1 = servicioTraduccion.traducirNullable(comida.strIngredient1),&#10;                strIngredient2 = servicioTraduccion.traducirNullable(comida.strIngredient2),&#10;                strIngredient3 = servicioTraduccion.traducirNullable(comida.strIngredient3),&#10;                strIngredient4 = servicioTraduccion.traducirNullable(comida.strIngredient4),&#10;                strIngredient5 = servicioTraduccion.traducirNullable(comida.strIngredient5),&#10;                strIngredient6 = servicioTraduccion.traducirNullable(comida.strIngredient6),&#10;                strIngredient7 = servicioTraduccion.traducirNullable(comida.strIngredient7),&#10;                strIngredient8 = servicioTraduccion.traducirNullable(comida.strIngredient8),&#10;                strIngredient9 = servicioTraduccion.traducirNullable(comida.strIngredient9),&#10;                strIngredient10 = servicioTraduccion.traducirNullable(comida.strIngredient10),&#10;                strIngredient11 = servicioTraduccion.traducirNullable(comida.strIngredient11),&#10;                strIngredient12 = servicioTraduccion.traducirNullable(comida.strIngredient12),&#10;                strIngredient13 = servicioTraduccion.traducirNullable(comida.strIngredient13),&#10;                strIngredient14 = servicioTraduccion.traducirNullable(comida.strIngredient14),&#10;                strIngredient15 = servicioTraduccion.traducirNullable(comida.strIngredient15),&#10;                strIngredient16 = servicioTraduccion.traducirNullable(comida.strIngredient16),&#10;                strIngredient17 = servicioTraduccion.traducirNullable(comida.strIngredient17),&#10;                strIngredient18 = servicioTraduccion.traducirNullable(comida.strIngredient18),&#10;                strIngredient19 = servicioTraduccion.traducirNullable(comida.strIngredient19),&#10;                strIngredient20 = servicioTraduccion.traducirNullable(comida.strIngredient20)&#10;            )&#10;        }&#10;        &#10;        return MealResponse(comidasTraducidas)&#10;    }&#10;    &#10;    private suspend fun traducirRespuestaBebidas(respuesta: DrinkResponse?): DrinkResponse? {&#10;        if (respuesta?.drinks == null) return respuesta&#10;        &#10;        val bebidasTraducidas = respuesta.drinks.map { bebida -&gt;&#10;            bebida.copy(&#10;                strDrink = servicioTraduccion.traducir(bebida.strDrink),&#10;                strCategory = servicioTraduccion.traducirNullable(bebida.strCategory),&#10;                strGlass = servicioTraduccion.traducirNullable(bebida.strGlass),&#10;                strInstructions = servicioTraduccion.traducirNullable(bebida.strInstructions),&#10;                // Traducir ingredientes&#10;                strIngredient1 = servicioTraduccion.traducirNullable(bebida.strIngredient1),&#10;                strIngredient2 = servicioTraduccion.traducirNullable(bebida.strIngredient2),&#10;                strIngredient3 = servicioTraduccion.traducirNullable(bebida.strIngredient3),&#10;                strIngredient4 = servicioTraduccion.traducirNullable(bebida.strIngredient4),&#10;                strIngredient5 = servicioTraduccion.traducirNullable(bebida.strIngredient5),&#10;                strIngredient6 = servicioTraduccion.traducirNullable(bebida.strIngredient6),&#10;                strIngredient7 = servicioTraduccion.traducirNullable(bebida.strIngredient7),&#10;                strIngredient8 = servicioTraduccion.traducirNullable(bebida.strIngredient8),&#10;                strIngredient9 = servicioTraduccion.traducirNullable(bebida.strIngredient9),&#10;                strIngredient10 = servicioTraduccion.traducirNullable(bebida.strIngredient10),&#10;                strIngredient11 = servicioTraduccion.traducirNullable(bebida.strIngredient11),&#10;                strIngredient12 = servicioTraduccion.traducirNullable(bebida.strIngredient12),&#10;                strIngredient13 = servicioTraduccion.traducirNullable(bebida.strIngredient13),&#10;                strIngredient14 = servicioTraduccion.traducirNullable(bebida.strIngredient14),&#10;                strIngredient15 = servicioTraduccion.traducirNullable(bebida.strIngredient15)&#10;            )&#10;        }&#10;        &#10;        return DrinkResponse(bebidasTraducidas)&#10;    }&#10;&#10;    // Operaciones de favoritos&#10;    fun obtenerFavoritos(): Flow&lt;List&lt;Receta&gt;&gt; {&#10;        return recetaDao.obtenerTodosFavoritos()&#10;    }&#10;    &#10;    suspend fun esFavorito(id: String): Boolean {&#10;        return recetaDao.esFavorito(id)&#10;    }&#10;    &#10;    suspend fun agregarFavorito(receta: Receta) {&#10;        recetaDao.insertarFavorito(receta)&#10;    }&#10;    &#10;    suspend fun eliminarFavorito(id: String) {&#10;        recetaDao.eliminarFavoritoPorId(id)&#10;    }&#10;    &#10;    suspend fun alternarFavorito(receta: Receta) {&#10;        if (esFavorito(receta.id)) {&#10;            eliminarFavorito(receta.id)&#10;        } else {&#10;            agregarFavorito(receta)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaCarga.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaCarga.kt" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun PantallaCarga(&#10;    onNavigateToHome: () -&gt; Unit&#10;) {&#10;    // Efecto para navegar automáticamente después de 3 segundos&#10;    LaunchedEffect(Unit) {&#10;        delay(3000) // 3 segundos de duración&#10;        onNavigateToHome()&#10;    }&#10;&#10;    // Fondo con gradiente&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary,&#10;                        MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            ),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // Logo principal&#10;            Image(&#10;                painter = painterResource(id = R.drawable.fusiondesabores),&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(200.dp)&#10;                    .padding(bottom = 32.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Texto de bienvenida&#10;            Text(&#10;                text = &quot;FlavorFusion&quot;,&#10;                style = MaterialTheme.typography.headlineLarge.copy(&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                ),&#10;                color = MaterialTheme.colorScheme.onPrimary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Descubre Sabores Únicos&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarBebidas.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarBebidas.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarBebidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Bebidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_transparente),&#10;                contentDescription = &quot;Logo&quot;,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 16.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar bebidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: mojito, coffee, beer&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarBebidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarBebidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando bebidas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaBebidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaBebidas) { receta -&gt;&#10;                            TarjetaRecetaBebida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;drink&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaBebidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron bebidas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'mojito', 'coffee' o 'beer'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Bebidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu bebida favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarBebidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaBebida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Tipo: ${receta.area}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarBebidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Bebidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.ic_logo_flavorfusion),&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(100.dp)&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 24.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar bebidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: mojito, coffee, beer&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarBebidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarBebidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando bebidas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaBebidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaBebidas) { receta -&gt;&#10;                            TarjetaRecetaBebida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;drink&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaBebidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron bebidas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'mojito', 'coffee' o 'beer'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Bebidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu bebida favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarBebidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaBebida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Tipo: ${receta.area}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarComidas.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarComidas.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarComidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Comidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar comidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: pasta, chicken, pizza&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = {&#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = {&#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarComidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarComidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando recetas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.resultadosBusquedaComidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaComidas) { receta -&gt;&#10;                            TarjetaRecetaComida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;meal&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaComidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron recetas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'pasta', 'chicken' o 'beef'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Comidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu receta favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = {&#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarComidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaComida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarComidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Comidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.fusiondesabores),&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(100.dp)&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 24.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar comidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: pasta, chicken, pizza&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = {&#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = {&#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarComidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarComidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando recetas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.resultadosBusquedaComidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaComidas) { receta -&gt;&#10;                            TarjetaRecetaComida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;meal&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaComidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron recetas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'pasta', 'chicken' o 'beef'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Comidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu receta favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = {&#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarComidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaComida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaFavoritos.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaFavoritos.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.RestaurantMenu&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaFavoritos(&#10;    onRecetaClick: (String, String) -&gt; Unit,&#10;    viewModel: InicioViewModel = hiltViewModel()&#10;) {&#10;    val favoritos by viewModel.favoritos.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Título&#10;        Text(&#10;            text = &quot;Mis Favoritos&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        if (favoritos.isEmpty()) {&#10;            // Estado vacío&#10;            Column(&#10;                modifier = Modifier.fillMaxSize(),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.outline&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;No tienes favoritos aún&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Explora recetas y marca tus favoritas tocando el corazón ❤️&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(horizontal = 32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            // Lista de favoritos&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(favoritos) { receta -&gt;&#10;                    TarjetaFavorito(&#10;                        receta = receta,&#10;                        onClick = { onRecetaClick(receta.id, receta.tipo) },&#10;                        onToggleFavorito = { viewModel.alternarFavorito(receta) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaFavorito(&#10;    receta: Receta,&#10;    onClick: () -&gt; Unit,&#10;    onToggleFavorito: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier.size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // Indicador de tipo&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.RestaurantMenu,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = if (receta.tipo == &quot;meal&quot;) &quot;Comida&quot; else &quot;Bebida&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onToggleFavorito) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Quitar de favoritos&quot;,&#10;                    tint = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.RestaurantMenu&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaFavoritos(&#10;    onRecetaClick: (String, String) -&gt; Unit,&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val favoritos by viewModel.favoritos.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Mis Favoritos&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            if (favoritos.isEmpty()) {&#10;                // Estado vacío&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Favorite,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(64.dp),&#10;                        tint = MaterialTheme.colorScheme.outline&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;No tienes favoritos aún&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Explora recetas y marca tus favoritas tocando el corazón ❤️&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(horizontal = 32.dp)&#10;                    )&#10;                }&#10;            } else {&#10;                // Lista de favoritos&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(favoritos) { receta -&gt;&#10;                        TarjetaFavorito(&#10;                            receta = receta,&#10;                            onClick = { onRecetaClick(receta.id, receta.tipo) },&#10;                            onToggleFavorito = { viewModel.alternarFavorito(receta) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaFavorito(&#10;    receta: Receta,&#10;    onClick: () -&gt; Unit,&#10;    onToggleFavorito: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier.size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // Indicador de tipo&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.RestaurantMenu,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = if (receta.tipo == &quot;meal&quot;) &quot;Comida&quot; else &quot;Bebida&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onToggleFavorito) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Quitar de favoritos&quot;,&#10;                    tint = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Flavor Fusion&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Título de bienvenida&#10;            Text(&#10;                text = &quot;¡Descubre Nuevos Sabores!&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                // Comida sugerida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Comida del Día&quot;,&#10;                        receta = comida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Bebida sugerida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Bebida del Día&quot;,&#10;                        receta = bebida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;&#10;                // Botones de navegación&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Botón explorar comidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarAComidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Comidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Botón explorar bebidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarABebidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Bebidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            estadoUI.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaSugerencia(&#10;    titulo: String,&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onRecetaClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = titulo,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onRecetaClick() }&#10;        ) {&#10;            Column {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = receta.imagen,&#10;                        contentDescription = receta.nombre,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Botón de favorito flotante&#10;                    IconButton(&#10;                        onClick = onFavoritoClick,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                                RoundedCornerShape(50)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.categoria,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.area,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Flavor Fusion&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo personalizado&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_personalizado), // Cambia &quot;logo_personalizado&quot; por el nombre de tu archivo PNG&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 16.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Título de bienvenida&#10;            Text(&#10;                text = &quot;¡Descubre Nuevos Sabores!&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                // Comida sugerida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Comida del Día&quot;,&#10;                        receta = comida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Bebida sugerida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Bebida del Día&quot;,&#10;                        receta = bebida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;&#10;                // Botones de navegación&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Botón explorar comidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarAComidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Comidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Botón explorar bebidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarABebidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Bebidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            estadoUI.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaSugerencia(&#10;    titulo: String,&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onRecetaClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = titulo,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onRecetaClick() }&#10;        ) {&#10;            Column {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = receta.imagen,&#10;                        contentDescription = receta.nombre,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Botón de favorito flotante&#10;                    IconButton(&#10;                        onClick = onFavoritoClick,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                                RoundedCornerShape(50)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.categoria,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.area,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/Navegacion.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/Navegacion.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.util&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import androidx.navigation.NavType&#10;import com.rodrigoangeloni.flavorfusion.screens.*&#10;&#10;@Composable&#10;fun NavegacionApp(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;carga&quot;&#10;    ) {&#10;        // Pantalla de carga (splash screen)&#10;        composable(&quot;carga&quot;) {&#10;            PantallaCarga(&#10;                onNavigateToHome = {&#10;                    navController.navigate(&quot;inicio&quot;) {&#10;                        // Eliminar la pantalla de carga del stack para que no se pueda volver&#10;                        popUpTo(&quot;carga&quot;) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Pantalla de inicio&#10;        composable(&quot;inicio&quot;) {&#10;            PantallaInicio(&#10;                navegarAComidas = { navController.navigate(&quot;explorar_comidas&quot;) },&#10;                navegarABebidas = { navController.navigate(&quot;explorar_bebidas&quot;) },&#10;                navegarAFavoritos = { navController.navigate(&quot;favoritos&quot;) },&#10;                navegarADetalleReceta = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar comidas&#10;        composable(&quot;explorar_comidas&quot;) {&#10;            PantallaExplorarComidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar bebidas&#10;        composable(&quot;explorar_bebidas&quot;) {&#10;            PantallaExplorarBebidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Pantalla de favoritos&#10;        composable(&quot;favoritos&quot;) {&#10;            PantallaFavoritos(&#10;                onRecetaClick = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Detalle de receta&#10;        composable(&#10;            route = &quot;detalle_receta/{recipeId}/{recipeType}&quot;,&#10;            arguments = listOf(&#10;                navArgument(&quot;recipeId&quot;) { type = NavType.StringType },&#10;                navArgument(&quot;recipeType&quot;) { type = NavType.StringType }&#10;            )&#10;        ) { backStackEntry -&gt;&#10;            val recipeId = backStackEntry.arguments?.getString(&quot;recipeId&quot;) ?: &quot;&quot;&#10;            val recipeType = backStackEntry.arguments?.getString(&quot;recipeType&quot;) ?: &quot;&quot;&#10;&#10;            PantallaDetalleReceta(&#10;                recipeId = recipeId,&#10;                recipeType = recipeType,&#10;                onNavigateUp = { navController.navigateUp() }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.util&#13;&#10;&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.navigation.NavHostController&#13;&#10;import androidx.navigation.compose.NavHost&#13;&#10;import androidx.navigation.compose.composable&#13;&#10;import androidx.navigation.navArgument&#13;&#10;import androidx.navigation.NavType&#13;&#10;import com.rodrigoangeloni.flavorfusion.screens.*&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun NavegacionApp(navController: NavHostController) {&#13;&#10;    NavHost(&#13;&#10;        navController = navController,&#13;&#10;        startDestination = &quot;carga&quot;&#13;&#10;    ) {&#13;&#10;        // Pantalla de carga (splash screen)&#13;&#10;        composable(&quot;carga&quot;) {&#13;&#10;            PantallaCarga(&#13;&#10;                onNavigateToHome = {&#13;&#10;                    navController.navigate(&quot;inicio&quot;) {&#13;&#10;                        // Eliminar la pantalla de carga del stack para que no se pueda volver&#13;&#10;                        popUpTo(&quot;carga&quot;) { inclusive = true }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Pantalla de inicio&#13;&#10;        composable(&quot;inicio&quot;) {&#13;&#10;            PantallaInicio(&#13;&#10;                navegarAComidas = { navController.navigate(&quot;explorar_comidas&quot;) },&#13;&#10;                navegarABebidas = { navController.navigate(&quot;explorar_bebidas&quot;) },&#13;&#10;                navegarAFavoritos = { navController.navigate(&quot;favoritos&quot;) },&#13;&#10;                navegarADetalleReceta = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Explorar comidas&#13;&#10;        composable(&quot;explorar_comidas&quot;) {&#13;&#10;            PantallaExplorarComidas(&#13;&#10;                onNavigateUp = { navController.navigateUp() },&#13;&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Explorar bebidas&#13;&#10;        composable(&quot;explorar_bebidas&quot;) {&#13;&#10;            PantallaExplorarBebidas(&#13;&#10;                onNavigateUp = { navController.navigateUp() },&#13;&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Pantalla de favoritos&#13;&#10;        composable(&quot;favoritos&quot;) {&#13;&#10;            PantallaFavoritos(&#13;&#10;                onRecetaClick = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) },&#13;&#10;                onNavigateUp = { navController.navigateUp() }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Detalle de receta&#13;&#10;        composable(&#13;&#10;            route = &quot;detalle_receta/{recipeId}/{recipeType}&quot;,&#13;&#10;            arguments = listOf(&#13;&#10;                navArgument(&quot;recipeId&quot;) { type = NavType.StringType },&#13;&#10;                navArgument(&quot;recipeType&quot;) { type = NavType.StringType }&#13;&#10;            )&#13;&#10;        ) { backStackEntry -&gt;&#13;&#10;            val recipeId = backStackEntry.arguments?.getString(&quot;recipeId&quot;) ?: &quot;&quot;&#13;&#10;            val recipeType = backStackEntry.arguments?.getString(&quot;recipeType&quot;) ?: &quot;&quot;&#13;&#10;&#13;&#10;            PantallaDetalleReceta(&#13;&#10;                recipeId = recipeId,&#13;&#10;                recipeType = recipeType,&#13;&#10;                onNavigateUp = { navController.navigateUp() }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/ServicioTraduccion.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/ServicioTraduccion.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.util&#10;&#10;import com.google.mlkit.nl.translate.TranslateLanguage&#10;import com.google.mlkit.nl.translate.Translation&#10;import com.google.mlkit.nl.translate.TranslatorOptions&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.tasks.await&#10;import kotlinx.coroutines.withContext&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Servicio de traducción utilizando ML Kit de Google&#10; * Permite traducir texto del inglés al español directamente en el dispositivo&#10; */&#10;@Singleton&#10;class ServicioTraduccion @Inject constructor() {&#10;&#10;    // Opciones para el traductor (inglés -&gt; español)&#10;    private val options = TranslatorOptions.Builder()&#10;        .setSourceLanguage(TranslateLanguage.ENGLISH)&#10;        .setTargetLanguage(TranslateLanguage.SPANISH)&#10;        .build()&#10;&#10;    // Instancia del traductor&#10;    private val traductor = Translation.getClient(options)&#10;&#10;    // Variable para saber si el modelo ya se descargó&#10;    private var modeloDescargado = false&#10;&#10;    /**&#10;     * Descarga el modelo de traducción si no está descargado&#10;     * @return true si el modelo está listo para usar&#10;     */&#10;    suspend fun descargarModeloSiNecesario(): Boolean = withContext(Dispatchers.IO) {&#10;        if (!modeloDescargado) {&#10;            try {&#10;                traductor.downloadModelIfNeeded().await()&#10;                modeloDescargado = true&#10;            } catch (e: Exception) {&#10;                return@withContext false&#10;            }&#10;        }&#10;        return@withContext modeloDescargado&#10;    }&#10;&#10;    /**&#10;     * Traduce un texto del inglés al español&#10;     * @param texto Texto en inglés a traducir&#10;     * @return Texto traducido al español o el texto original si ocurre un error&#10;     */&#10;    suspend fun traducir(texto: String): String = withContext(Dispatchers.IO) {&#10;        if (texto.isBlank()) return@withContext texto&#10;&#10;        // Intentar descargar el modelo si es necesario&#10;        if (!descargarModeloSiNecesario()) {&#10;            return@withContext texto&#10;        }&#10;&#10;        try {&#10;            // Traducir el texto&#10;            val resultado = traductor.translate(texto).await()&#10;            // Convertir primera letra a mayúscula si el texto original comienza con mayúscula&#10;            if (texto.isNotEmpty() &amp;&amp; texto[0].isUpperCase()) {&#10;                return@withContext resultado.replaceFirstChar { it.uppercase() }&#10;            }&#10;            return@withContext resultado&#10;        } catch (e: Exception) {&#10;            // Si hay un error, devolver el texto original&#10;            return@withContext texto&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Traduce una lista de textos del inglés al español&#10;     * @param textos Lista de textos en inglés a traducir&#10;     * @return Lista de textos traducidos al español&#10;     */&#10;    suspend fun traducirLista(textos: List&lt;String&gt;): List&lt;String&gt; = withContext(Dispatchers.IO) {&#10;        if (textos.isEmpty()) return@withContext emptyList()&#10;&#10;        // Intentar descargar el modelo si es necesario&#10;        if (!descargarModeloSiNecesario()) {&#10;            return@withContext textos&#10;        }&#10;&#10;        return@withContext textos.map { texto -&gt;&#10;            try {&#10;                traducir(texto)&#10;            } catch (e: Exception) {&#10;                texto&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Libera los recursos del traductor&#10;     */&#10;    fun cerrar() {&#10;        traductor.close()&#10;        modeloDescargado = false&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.util&#10;&#10;import com.google.mlkit.nl.translate.TranslateLanguage&#10;import com.google.mlkit.nl.translate.Translation&#10;import com.google.mlkit.nl.translate.TranslatorOptions&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.tasks.await&#10;import kotlinx.coroutines.withContext&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;/**&#10; * Servicio de traducción utilizando ML Kit de Google&#10; * Permite traducir texto del inglés al español directamente en el dispositivo&#10; */&#10;@Singleton&#10;class ServicioTraduccion @Inject constructor() {&#10;&#10;    // Opciones para el traductor (inglés -&gt; español)&#10;    private val options = TranslatorOptions.Builder()&#10;        .setSourceLanguage(TranslateLanguage.ENGLISH)&#10;        .setTargetLanguage(TranslateLanguage.SPANISH)&#10;        .build()&#10;&#10;    // Instancia del traductor&#10;    private val traductor = Translation.getClient(options)&#10;&#10;    // Variable para saber si el modelo ya se descargó&#10;    private var modeloDescargado = false&#10;&#10;    /**&#10;     * Descarga el modelo de traducción si no está descargado&#10;     * @return true si el modelo está listo para usar&#10;     */&#10;    suspend fun descargarModeloSiNecesario(): Boolean = withContext(Dispatchers.IO) {&#10;        if (!modeloDescargado) {&#10;            try {&#10;                traductor.downloadModelIfNeeded().await()&#10;                modeloDescargado = true&#10;            } catch (e: Exception) {&#10;                return@withContext false&#10;            }&#10;        }&#10;        return@withContext modeloDescargado&#10;    }&#10;&#10;    /**&#10;     * Traduce un texto del inglés al español&#10;     * @param texto Texto en inglés a traducir&#10;     * @return Texto traducido al español o el texto original si ocurre un error&#10;     */&#10;    suspend fun traducir(texto: String): String = withContext(Dispatchers.IO) {&#10;        if (texto.isBlank()) return@withContext texto&#10;&#10;        // Intentar descargar el modelo si es necesario&#10;        if (!descargarModeloSiNecesario()) {&#10;            return@withContext texto&#10;        }&#10;&#10;        try {&#10;            // Traducir el texto&#10;            val resultado = traductor.translate(texto).await()&#10;            // Convertir primera letra a mayúscula si el texto original comienza con mayúscula&#10;            if (texto.isNotEmpty() &amp;&amp; texto[0].isUpperCase()) {&#10;                return@withContext resultado.replaceFirstChar { it.uppercase() }&#10;            }&#10;            return@withContext resultado&#10;        } catch (e: Exception) {&#10;            // Si hay un error, devolver el texto original&#10;            return@withContext texto&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Traduce un texto potencialmente nulo del inglés al español&#10;     * @param texto Texto en inglés a traducir (puede ser nulo)&#10;     * @return Texto traducido al español, el texto original, o null si la entrada era null&#10;     */&#10;    suspend fun traducirNullable(texto: String?): String? {&#10;        if (texto == null) return null&#10;        return traducir(texto)&#10;    }&#10;&#10;    /**&#10;     * Traduce una lista de textos del inglés al español&#10;     * @param textos Lista de textos en inglés a traducir&#10;     * @return Lista de textos traducidos al español&#10;     */&#10;    suspend fun traducirLista(textos: List&lt;String&gt;): List&lt;String&gt; = withContext(Dispatchers.IO) {&#10;        if (textos.isEmpty()) return@withContext emptyList()&#10;&#10;        // Intentar descargar el modelo si es necesario&#10;        if (!descargarModeloSiNecesario()) {&#10;            return@withContext textos&#10;        }&#10;&#10;        return@withContext textos.map { texto -&gt;&#10;            try {&#10;                traducir(texto)&#10;            } catch (e: Exception) {&#10;                texto&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Libera los recursos del traductor&#10;     */&#10;    fun cerrar() {&#10;        traductor.close()&#10;        modeloDescargado = false&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_logo_flavorfusion.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_logo_flavorfusion.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;120&quot;&#10;    android:viewportHeight=&quot;120&quot;&gt;&#10;    &#10;    &lt;!-- Círculo de fondo --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF6B35&quot;&#10;        android:pathData=&quot;M60,10 A50,50 0 1,1 60,110 A50,50 0 1,1 60,10 Z&quot; /&gt;&#10;    &#10;    &lt;!-- Copa/Vaso --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M40,35 L80,35 L75,75 Q75,80 70,80 L50,80 Q45,80 45,75 L40,35 Z&quot; /&gt;&#10;    &#10;    &lt;!-- Detalle de bebida --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M42,40 L78,40 L74,65 L46,65 L42,40 Z&quot; /&gt;&#10;    &#10;    &lt;!-- Texto &quot;FF&quot; --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M25,95 L25,85 L35,85 L35,88 L28,88 L28,90 L33,90 L33,93 L28,93 L28,95 Z&#10;                          M38,95 L38,85 L48,85 L48,88 L41,88 L41,90 L46,90 L46,93 L41,93 L41,95 Z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>