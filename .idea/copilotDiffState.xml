<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# ️ FlavorFusion2 - Descubre el Mundo de las Recetas ✨&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;![Android](https://img.shields.io/badge/Platform-Android-green.svg)&#10;![API](https://img.shields.io/badge/Min%20API-24-orange.svg)&#10;![Kotlin](https://img.shields.io/badge/Language-Kotlin-purple.svg)&#10;![Compose](https://img.shields.io/badge/UI-Jetpack%20Compose-blue.svg)&#10;&#10;**Una aplicación móvil moderna para explorar y gestionar recetas de comidas y bebidas** &#10;&#10;[ Instalación](#-instalación) • [ Características](#-características) • [ Manual de Uso](#-manual-de-uso) • [️ Arquitectura](#️-arquitectura)&#10;&#10;&lt;/div&gt;&#10;&#10;---&#10;&#10;##  Características Principales&#10;&#10;###  **Inicio Inteligente**&#10;-  **Sugerencias diarias** de comidas y bebidas aleatorias&#10;-  **Interfaz moderna** con Material Design 3&#10;- ⚡ **Navegación fluida** entre secciones&#10;&#10;###  **Búsqueda Inteligente en Español** ⭐ **¡NOVEDAD!**&#10;-  **Búsquedas en español** con traducción automática&#10;- ️ **Explorar comidas** escribiendo &quot;pollo&quot;, &quot;pasta&quot;, &quot;tacos&quot;&#10;-  **Descubrir bebidas** con &quot;mojito&quot;, &quot;café&quot;, &quot;cerveza&quot;&#10;- ⌨️ **Búsqueda con Enter** o botón dedicado&#10;-  **Sugerencias visuales** con chips interactivos&#10;-  **Traducción transparente** que muestra el proceso&#10;-  **Limpieza automática** de resultados&#10;&#10;### ❤️ **Sistema de Favoritos**&#10;-  **Almacenamiento local** con Room Database&#10;-  **Acceso offline** a recetas guardadas&#10;- ♻️ **Sincronización en tiempo real**&#10;&#10;###  **Datos en Vivo**&#10;-  **APIs externas** (TheMealDB + TheCocktailDB)&#10;-  **Contenido actualizado** constantemente&#10;- ️ **Manejo robusto de errores**&#10;-  **Interfaz 100% en español**&#10;&#10;---&#10;&#10;##  Instalación&#10;&#10;### Requisitos del Sistema&#10;-  **Android 7.0** (API 24) o superior&#10;-  **2GB RAM** recomendado&#10;-  **100MB** espacio libre&#10;-  **Conexión a internet** para búsquedas&#10;&#10;### Pasos de Instalación&#10;1. **Clona el repositorio**&#10;   ```bash&#10;   git clone https://github.com/tu-usuario/FlavorFusion2.git&#10;   ```&#10;&#10;2. **Abre en Android Studio**&#10;   ```bash&#10;   cd FlavorFusion2&#10;   ```&#10;&#10;3. **Ejecuta la aplicación**&#10;   - Conecta tu dispositivo Android o usa un emulador&#10;   - Presiona Run ▶️ en Android Studio&#10;&#10;---&#10;&#10;##  Manual de Uso&#10;&#10;###  **Primeros Pasos**&#10;&#10;#### 1.  Pantalla de Inicio&#10;- Al abrir la app, verás **sugerencias del día**&#10;- ️ **Comida destacada** - Receta aleatoria de comida&#10;-  **Bebida destacada** - Cóctel o bebida especial&#10;-  Usa la **navegación inferior** para cambiar de sección&#10;&#10;#### 2.  Explorar Recetas&#10;&#10;##### ️ **Buscar Comidas en Español** ⭐ **¡NUEVA FUNCIONALIDAD!**&#10;```&#10;1. Toca la sección &quot;Explorar Comidas&quot;&#10;2. Escribe en ESPAÑOL: &quot;pollo&quot;, &quot;pasta&quot;, &quot;tacos&quot;, &quot;hamburguesa&quot;&#10;3. Ve las sugerencias automáticas en chips&#10;4. Ejecuta la búsqueda:&#10;   • Presiona Enter ⏎&#10;   • Toca el botón de búsqueda &#10;5. ¡La app traduce automáticamente y muestra resultados!&#10;```&#10;&#10;**Ejemplos que funcionan perfectamente:**&#10;- &quot;pollo&quot; → encuentra recetas de chicken&#10;- &quot;pasta&quot; → encuentra recetas de pasta  &#10;- &quot;carne&quot; → encuentra recetas de beef&#10;- &quot;pescado&quot; → encuentra recetas de fish&#10;- &quot;pizza&quot; → encuentra recetas de pizza&#10;&#10;#####  **Buscar Bebidas en Español** ⭐ **¡NUEVA FUNCIONALIDAD!**&#10;```&#10;1. Ve a &quot;Explorar Bebidas&quot;&#10;2. Escribe en ESPAÑOL: &quot;mojito&quot;, &quot;café&quot;, &quot;cerveza&quot;, &quot;té&quot;&#10;3. Ve sugerencias específicas para bebidas&#10;4. La traducción es automática y transparente&#10;5. Descubre cócteles y bebidas internacionales&#10;```&#10;&#10;**Ejemplos que funcionan perfectamente:**&#10;- &quot;café&quot; → encuentra recetas de coffee&#10;- &quot;mojito&quot; → encuentra recetas de mojito&#10;- &quot;cerveza&quot; → encuentra recetas de beer&#10;- &quot;té&quot; → encuentra recetas de tea&#10;- &quot;batido&quot; → encuentra smoothies&#10;&#10;#### 3.  **Ver Detalles de Recetas**&#10;- ️ **Imagen en alta calidad**&#10;-  **Información completa**: nombre, categoría, origen&#10;-  **Lista de ingredientes** con cantidades exactas&#10;- ‍ **Instrucciones paso a paso**&#10;- ❤️ **Botón de favoritos** para guardar&#10;&#10;#### 4. ❤️ **Gestionar Favoritos**&#10;- **Marcar favorito**: Toca el corazón ❤️ en cualquier receta&#10;- **Ver favoritos**: Usa la sección dedicada en navegación&#10;- **Acceso offline**: Los favoritos funcionan sin internet&#10;- **Eliminar**: Toca nuevamente el corazón para quitar&#10;&#10;---&#10;&#10;## ️ **Estados de la Aplicación**&#10;&#10;| Estado | Icono | Descripción |&#10;|--------|-------|-------------|&#10;| **Cargando** |  | Spinner mientras se cargan datos |&#10;| **Sin resultados** |  | Mensaje cuando no hay coincidencias |&#10;| **Error** | ⚠️ | Problema de conexión con botón reintentar |&#10;| **Favorito activo** | ❤️ | Receta guardada en favoritos |&#10;| **Favorito inactivo** |  | Receta no guardada |&#10;&#10;---&#10;&#10;##  **Tips y Trucos**&#10;&#10;###  **Búsquedas Efectivas**&#10;- ✅ **Usa palabras simples**: &quot;chicken&quot; &gt; &quot;pollo con verduras&quot;&#10;- ✅ **Prueba en inglés**: Las APIs funcionan mejor&#10;- ✅ **Sé específico**: &quot;pasta&quot; &gt; &quot;comida italiana&quot;&#10;- ✅ **Experimenta**: Prueba diferentes términos&#10;&#10;### ❤️ **Gestión de Favoritos**&#10;- ️ **Organiza mentalmente** por tipo de comida&#10;-  **Aprovecha el acceso offline**&#10;-  **Limpia periódicamente** favoritos no usados&#10;&#10;###  **Navegación Rápida**&#10;-  **Barra inferior**: Siempre accesible&#10;- ← **Botón atrás**: Consistente en toda la app&#10;-  **Gestos**: Deslizar para actualizar&#10;&#10;---&#10;&#10;##  **Solución de Problemas**&#10;&#10;&lt;details&gt;&#10;&lt;summary&gt; La búsqueda no funciona&lt;/summary&gt;&#10;&#10;- ✅ **Verifica tu conexión** a internet&#10;- ✅ **Revisa la ortografía** del término buscado&#10;- ✅ **Prueba términos diferentes** o más simples&#10;- ✅ **Reinicia la aplicación**&#10;&lt;/details&gt;&#10;&#10;&lt;details&gt;&#10;&lt;summary&gt;❤️ Los favoritos no se guardan&lt;/summary&gt;&#10;&#10;- ✅ **Espera la confirmación** visual (corazón rojo)&#10;- ✅ **Verifica espacio** en tu dispositivo&#10;- ✅ **Reinicia la aplicación**&#10;&lt;/details&gt;&#10;&#10;&lt;details&gt;&#10;&lt;summary&gt; La aplicación está lenta&lt;/summary&gt;&#10;&#10;- ✅ **Cierra otras aplicaciones**&#10;- ✅ **Verifica tu conexión** a internet&#10;- ✅ **Reinicia tu dispositivo**&#10;&lt;/details&gt;&#10;&#10;---&#10;&#10;## ️ Arquitectura&#10;&#10;### ️ **Patrones Implementados**&#10;- **MVVM** - Separación clara de responsabilidades&#10;- **Repository Pattern** - Abstracción de fuentes de datos&#10;- **Dependency Injection** - Gestión automatizada con Hilt&#10;- **Single Source of Truth** - Estado centralizado&#10;&#10;###  **Stack Tecnológico**&#10;-  **UI**: Jetpack Compose + Material Design 3&#10;-  **Architecture**: MVVM + Repository Pattern&#10;-  **DI**: Hilt&#10;-  **Database**: Room&#10;-  **Network**: Retrofit + Gson&#10;- ⚡ **Async**: Kotlin Coroutines + Flow&#10;-  **Navigation**: Jetpack Navigation Compose&#10;&#10;###  **APIs Utilizadas**&#10;- ️ **[TheMealDB](https://www.themealdb.com/api.php)** - Recetas de comidas&#10;-  **[TheCocktailDB](https://www.thecocktaildb.com/api.php)** - Recetas de bebidas&#10;&#10;---&#10;&#10;##  **Estructura del Proyecto**&#10;&#10;```&#10; FlavorFusion2/&#10;├──  app/src/main/java/com/rodrigoangeloni/flavorfusion/&#10;│   ├──  components/          # Componentes UI reutilizables&#10;│   ├──  database/           # Room database y DAOs&#10;│   ├──  di/                 # Módulos de Hilt&#10;│   ├──  model/              # Modelos de datos&#10;│   ├──  network/            # Servicios API y DTOs&#10;│   ├──  repository/         # Repository pattern&#10;│   ├── ️ screens/            # Pantallas Compose&#10;│   ├──  ui/theme/           # Tema y estilos&#10;│   ├──  viewmodels/         # ViewModels MVVM&#10;│   └──  MainActivity.kt     # Actividad principal&#10;└──  doc/                   # Documentación&#10;    ├──  objetivo-y-funcionalidades.md&#10;    ├── ️ diagrama-arquitectura.md&#10;    └──  manual-de-uso.md&#10;```&#10;&#10;---&#10;&#10;##  Contribuir&#10;&#10;¿Quieres contribuir? ¡Genial! &#10;&#10;1.  **Fork** el proyecto&#10;2.  **Crea una rama** para tu feature (`git checkout -b feature/AmazingFeature`)&#10;3.  **Commit** tus cambios (`git commit -m 'Add some AmazingFeature'`)&#10;4.  **Push** a la rama (`git push origin feature/AmazingFeature`)&#10;5.  **Abre un Pull Request**&#10;&#10;---&#10;&#10;##  Licencia&#10;&#10;Este proyecto está bajo la Licencia MIT. Ver el archivo `LICENSE` para más detalles.&#10;&#10;---&#10;&#10;## ‍ Autor&#10;&#10;**Rodrigo Angeloni**&#10;-  Email: [roandev87@gmail.com]&#10;-  GitHub: [@rodrigoangeloni](https://github.com/rodrigoangeloni)&#10;-  LinkedIn: [rodrigo-angeloni](https://www.linkedin.com/in/rodrigo-angeloni)&#10;&#10;---&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;**¡Disfruta explorando el mundo de las recetas! ️✨**&#10;&#10;⭐ **¿Te gusta el proyecto? ¡Dale una estrella!** ⭐&#10;&#10;&lt;/div&gt;&#10;" />
              <option name="updatedContent" value="# ️ FlavorFusion2 - Descubre el Mundo de las Recetas ✨&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;![Android](https://img.shields.io/badge/Platform-Android-green.svg)&#10;![API](https://img.shields.io/badge/Min%20API-24-orange.svg)&#10;![Kotlin](https://img.shields.io/badge/Language-Kotlin-purple.svg)&#10;![Compose](https://img.shields.io/badge/UI-Jetpack%20Compose-blue.svg)&#10;&#10;**Una aplicación móvil moderna para explorar y gestionar recetas de comidas y bebidas** &#10;&#10;[ Instalación](#-instalación) • [ Características](#-características) • [ Manual de Uso](#-manual-de-uso) • [️ Arquitectura](#️-arquitectura)&#10;&#10;&lt;/div&gt;&#10;&#10;---&#10;&#10;##  Características Principales&#10;&#10;###  **Inicio Inteligente**&#10;-  **Sugerencias diarias** de comidas y bebidas aleatorias&#10;-  **Interfaz moderna** con Material Design 3&#10;- ⚡ **Navegación fluida** entre secciones&#10;&#10;###  **Búsqueda Inteligente** &#10;- ️ **Explorar comidas** escribiendo &quot;chicken&quot;, &quot;pasta&quot;, &quot;tacos&quot;&#10;-  **Descubrir bebidas** con &quot;mojito&quot;, &quot;coffee&quot;, &quot;beer&quot;&#10;- ⌨️ **Búsqueda con Enter** o botón dedicado&#10;-  **Sugerencias visuales** con chips interactivos&#10;-  **Limpieza automática** de resultados&#10;&#10;### ❤️ **Sistema de Favoritos Completo** ⭐ **¡IMPLEMENTADO!**&#10;-  **Almacenamiento local** con Room Database SQLite&#10;-  **Acceso offline** a recetas guardadas sin internet&#10;- ♻️ **Sincronización en tiempo real** entre todas las pantallas&#10;-  **Botón de favorito** disponible en toda la aplicación&#10;-  **Pantalla dedicada** para gestionar favoritos&#10;-  **Alternado inteligente** - agrega/quita con un toque&#10;-  **Estado visual claro** - corazón rojo/gris&#10;&#10;###  **Datos en Vivo**&#10;-  **APIs externas** (TheMealDB + TheCocktailDB)&#10;-  **Contenido actualizado** constantemente&#10;- ️ **Manejo robusto de errores**&#10;-  **Interfaz 100% en español**&#10;&#10;---&#10;&#10;##  Instalación&#10;&#10;### Requisitos del Sistema&#10;-  **Android 7.0** (API 24) o superior&#10;-  **2GB RAM** recomendado&#10;-  **150MB** espacio libre (100MB app + 50MB favoritos)&#10;-  **Conexión a internet** para búsquedas (favoritos funcionan offline)&#10;&#10;### Pasos de Instalación&#10;1. **Clona el repositorio**&#10;   ```bash&#10;   git clone https://github.com/tu-usuario/FlavorFusion2.git&#10;   ```&#10;&#10;2. **Abre en Android Studio**&#10;   ```bash&#10;   cd FlavorFusion2&#10;   ```&#10;&#10;3. **Ejecuta la aplicación**&#10;   - Conecta tu dispositivo Android o usa un emulador&#10;   - Presiona Run ▶️ en Android Studio&#10;&#10;---&#10;&#10;##  Manual de Uso&#10;&#10;###  **Primeros Pasos**&#10;&#10;#### 1.  Pantalla de Inicio&#10;- Al abrir la app, verás **sugerencias del día**&#10;- ️ **Comida destacada** - Receta aleatoria de comida&#10;-  **Bebida destacada** - Cóctel o bebida especial&#10;- ❤️ **Botones de favorito** - Guarda directamente desde inicio&#10;-  Usa la **navegación inferior** para cambiar de sección&#10;&#10;#### 2.  Explorar Recetas&#10;&#10;##### ️ **Buscar Comidas**&#10;```&#10;1. Toca la sección &quot;Explorar Comidas&quot;&#10;2. Escribe: &quot;chicken&quot;, &quot;pasta&quot;, &quot;beef&quot;, &quot;pizza&quot;&#10;3. Ejecuta la búsqueda:&#10;   • Presiona Enter ⏎&#10;   • Toca el botón de búsqueda &#10;4. ❤️ Marca favoritos directamente desde resultados&#10;```&#10;&#10;#####  **Buscar Bebidas**&#10;```&#10;1. Ve a &quot;Explorar Bebidas&quot;&#10;2. Escribe: &quot;mojito&quot;, &quot;coffee&quot;, &quot;beer&quot;, &quot;tea&quot;&#10;3. Encuentra cócteles y bebidas internacionales&#10;4. ❤️ Guarda tus bebidas favoritas instantáneamente&#10;```&#10;&#10;#### 3.  **Ver Detalles de Recetas**&#10;- ️ **Imagen en alta calidad**&#10;- ❤️ **Botón de favorito prominente** en la parte superior&#10;-  **Información completa**: nombre, categoría, origen&#10;-  **Lista de ingredientes** con cantidades exactas&#10;- ‍ **Instrucciones paso a paso**&#10;&#10;#### 4. ❤️ **Gestionar Favoritos** ⭐ **¡NUEVA FUNCIONALIDAD!**&#10;&#10;##### **Marcar como Favorito**&#10;- **Desde cualquier pantalla**: Toca el corazón ❤️ &#10;- **Se pone rojo**: Indica que se guardó exitosamente&#10;- **Guardado instantáneo**: No necesitas confirmar&#10;&#10;##### **Ver tus Favoritos**&#10;- **Pantalla dedicada**: Toca &quot;Favoritos&quot; en navegación inferior&#10;- **Lista completa**: Todas tus recetas guardadas&#10;- **Información rica**: Imagen, nombre, categoría, tipo (comida/bebida)&#10;- **Acceso offline**: Funciona sin conexión a internet&#10;&#10;##### **Quitar de Favoritos**&#10;- **Opción 1**: Toca el ❤️ rojo en cualquier pantalla → se pone gris&#10;- **Opción 2**: Desde pantalla de favoritos, toca ❤️ → se elimina de la lista&#10;&#10;##### **Características Especiales**&#10;- ✅ **Sincronización instantánea**: Cambios visibles en toda la app&#10;- ✅ **Persistencia offline**: Datos guardados localmente&#10;- ✅ **Sin límites**: Guarda tantas recetas como quieras&#10;- ✅ **Orden cronológico**: Las más recientes aparecen primero&#10;&#10;---&#10;&#10;## ️ **Estados de la Aplicación**&#10;&#10;| Estado | Icono | Descripción |&#10;|--------|-------|-------------|&#10;| **Cargando** |  | Spinner mientras se cargan datos |&#10;| **Sin resultados** |  | Mensaje cuando no hay coincidencias |&#10;| **Error** | ⚠️ | Problema de conexión con botón reintentar |&#10;| **Favorito activo** | ❤️ | Receta guardada en favoritos |&#10;| **Favorito inactivo** |  | Receta no guardada |&#10;| **Favoritos vacíos** |  | Pantalla sin favoritos con mensaje motivacional |&#10;&#10;---&#10;&#10;##  **Tips y Trucos**&#10;&#10;###  **Búsquedas Efectivas**&#10;- ✅ **Usa palabras simples**: &quot;chicken&quot; &gt; &quot;pollo con verduras&quot;&#10;- ✅ **Prueba en inglés**: Las APIs funcionan mejor&#10;- ✅ **Sé específico**: &quot;pasta&quot; &gt; &quot;comida italiana&quot;&#10;- ✅ **Experimenta**: Prueba diferentes términos&#10;&#10;### ❤️ **Gestión de Favoritos**&#10;- ️ **Organiza mentalmente** por tipo de comida&#10;-  **Aprovecha el acceso offline** para cocinar sin internet&#10;-  **Limpia periódicamente** favoritos no usados&#10;-  **Los cambios son instantáneos** en toda la app&#10;&#10;###  **Navegación Rápida**&#10;-  **Barra inferior**: Siempre accesible&#10;- ← **Botón atrás**: Consistente en toda la app&#10;-  **Gestos**: Deslizar para actualizar&#10;&#10;---&#10;&#10;##  **Solución de Problemas**&#10;&#10;&lt;details&gt;&#10;&lt;summary&gt; La búsqueda no funciona&lt;/summary&gt;&#10;&#10;- ✅ **Verifica tu conexión** a internet&#10;- ✅ **Revisa la ortografía** del término buscado&#10;- ✅ **Prueba términos diferentes** o más simples&#10;- ✅ **Reinicia la aplicación**&#10;&lt;/details&gt;&#10;&#10;&lt;details&gt;&#10;&lt;summary&gt;❤️ Los favoritos no se guardan&lt;/summary&gt;&#10;&#10;- ✅ **Verifica el corazón**: Debe ponerse rojo al tocarlo&#10;- ✅ **Espacio disponible**: Verifica que tengas memoria libre&#10;- ✅ **Reinicia la aplicación** completamente&#10;- ✅ **El problema está resuelto**: Nueva implementación con Room Database&#10;&lt;/details&gt;&#10;&#10;&lt;details&gt;&#10;&lt;summary&gt; La aplicación está lenta&lt;/summary&gt;&#10;&#10;- ✅ **Cierra otras aplicaciones**&#10;- ✅ **Verifica tu conexión** a internet&#10;- ✅ **Reinicia tu dispositivo**&#10;&lt;/details&gt;&#10;&#10;---&#10;&#10;## ️ Arquitectura&#10;&#10;### ️ **Patrones Implementados**&#10;- **MVVM** - Separación clara de responsabilidades&#10;- **Repository Pattern** - Abstracción de fuentes de datos&#10;- **Dependency Injection** - Gestión automatizada con Hilt&#10;- **Single Source of Truth** - Estado centralizado&#10;&#10;###  **Stack Tecnológico**&#10;-  **UI**: Jetpack Compose + Material Design 3&#10;-  **Architecture**: MVVM + Repository Pattern&#10;-  **DI**: Hilt&#10;-  **Database**: Room SQLite ⭐ **Para favoritos**&#10;-  **Network**: Retrofit + Gson&#10;- ⚡ **Async**: Kotlin Coroutines + Flow&#10;-  **Navigation**: Jetpack Navigation Compose&#10;&#10;###  **APIs Utilizadas**&#10;- ️ **[TheMealDB](https://www.themealdb.com/api.php)** - Recetas de comidas&#10;-  **[TheCocktailDB](https://www.thecocktaildb.com/api.php)** - Recetas de bebidas&#10;&#10;###  **Persistencia de Datos** ⭐ **NUEVO**&#10;```kotlin&#10;// Entidad Room para favoritos&#10;@Entity(tableName = &quot;favoritos&quot;)&#10;data class Receta(&#10;    @PrimaryKey val id: String,&#10;    val nombre: String,&#10;    val imagen: String,&#10;    val categoria: String,&#10;    val area: String,&#10;    val instrucciones: String,&#10;    val ingredientes: String,&#10;    val tipo: String, // &quot;meal&quot; o &quot;drink&quot;&#10;    val fechaAgregado: Long&#10;)&#10;&#10;// DAO con operaciones de favoritos&#10;@Dao interface RecetaDao {&#10;    @Query(&quot;SELECT * FROM favoritos ORDER BY fechaAgregado DESC&quot;)&#10;    fun obtenerTodosFavoritos(): Flow&lt;List&lt;Receta&gt;&gt;&#10;    &#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertarFavorito(receta: Receta)&#10;    &#10;    @Query(&quot;DELETE FROM favoritos WHERE id = :id&quot;)&#10;    suspend fun eliminarFavoritoPorId(id: String)&#10;    &#10;    @Query(&quot;SELECT EXISTS(SELECT 1 FROM favoritos WHERE id = :id)&quot;)&#10;    suspend fun esFavorito(id: String): Boolean&#10;}&#10;```&#10;&#10;---&#10;&#10;##  **Estructura del Proyecto**&#10;&#10;```&#10; FlavorFusion2/&#10;├──  app/src/main/java/com/rodrigoangeloni/flavorfusion/&#10;│   ├──  database/           # Room database y DAOs ⭐ NUEVO&#10;│   │   ├── BaseDeDatos.kt     # Configuración Room&#10;│   │   └── RecetaDao.kt       # Operaciones favoritos&#10;│   ├──  di/                 # Módulos de Hilt&#10;│   ├──  model/              # Modelos de datos + DTOs&#10;│   ├──  network/            # Servicios API &#10;│   ├──  repository/         # Repository pattern ⭐ ACTUALIZADO&#10;│   ├── ️ screens/            # Pantallas Compose&#10;│   │   ├── PantallaInicio.kt&#10;│   │   ├── PantallaFavoritos.kt ⭐ NUEVO&#10;│   │   ├── PantallaExplorarComidas.kt&#10;│   │   ├── PantallaExplorarBebidas.kt&#10;│   │   └── PantallaDetalleReceta.kt&#10;│   ├──  ui/theme/           # Tema y estilos&#10;│   ├──  viewmodels/         # ViewModels MVVM ⭐ ACTUALIZADO&#10;│   └──  MainActivity.kt     # Actividad principal&#10;└──  doc/                   # Documentación ⭐ ACTUALIZADA&#10;    ├──  objetivo-y-funcionalidades.md&#10;    ├── ️ diagrama-arquitectura.md&#10;    └──  manual-de-uso.md&#10;```&#10;&#10;---&#10;&#10;##  **Lo Nuevo en esta Versión** ⭐&#10;&#10;### ❤️ **Sistema de Favoritos Completo**&#10;- ✅ **Base de datos local**: Room SQLite para persistencia&#10;- ✅ **Pantalla dedicada**: Gestión completa de favoritos&#10;- ✅ **Sincronización en tiempo real**: Estado actualizado instantáneamente&#10;- ✅ **Acceso offline**: Favoritos disponibles sin internet&#10;- ✅ **Botones intuitivos**: Corazón rojo/gris en toda la app&#10;&#10;### ️ **Arquitectura Mejorada**&#10;- ✅ **Repository actualizado**: Maneja API + Database&#10;- ✅ **ViewModel renovado**: Estado unificado con Flow reactivo  &#10;- ✅ **Modelo de datos unificado**: Una entidad para comidas y bebidas&#10;- ✅ **Inyección de dependencias**: Configuración completa con Hilt&#10;&#10;###  **Documentación Completa**&#10;- ✅ **Manual de uso actualizado**: Instrucciones detalladas de favoritos&#10;- ✅ **Diagrama de arquitectura**: Refleja nueva implementación&#10;- ✅ **Objetivos y funcionalidades**: Lista completa de características&#10;&#10;---&#10;&#10;##  Contribuir&#10;&#10;¿Quieres contribuir? ¡Genial! &#10;&#10;1.  **Fork** el proyecto&#10;2.  **Crea una rama** para tu feature (`git checkout -b feature/AmazingFeature`)&#10;3.  **Commit** tus cambios (`git commit -m 'Add some AmazingFeature'`)&#10;4.  **Push** a la rama (`git push origin feature/AmazingFeature`)&#10;5.  **Abre un Pull Request**&#10;&#10;---&#10;&#10;##  Licencia&#10;&#10;Este proyecto está bajo la Licencia MIT. Ver el archivo `LICENSE` para más detalles.&#10;&#10;---&#10;&#10;## ‍ Autor&#10;&#10;**Rodrigo Angeloni**&#10;-  Email: [roandev87@gmail.com]&#10;-  GitHub: [@rodrigoangeloni](https://github.com/rodrigoangeloni)&#10;&#10;---&#10;&#10;&lt;div align=&quot;center&quot;&gt;&#10;&#10;**¡Disfruta explorando el mundo de las recetas con favoritos que nunca se pierden! ️✨**&#10;&#10;⭐ **¿Te gusta el proyecto? ¡Dale una estrella!** ⭐&#10;&#10;**Nueva funcionalidad de favoritos implementada y completamente funcional** ❤️&#10;&#10;&lt;/div&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/MainActivity.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.navigation.compose.rememberNavController&#10;import com.rodrigoangeloni.flavorfusion.ui.theme.FlavorFusionTheme&#10;import com.rodrigoangeloni.flavorfusion.util.NavegacionApp&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            FlavorFusionTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    NavegacionApp(navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.ui.Modifier&#10;import androidx.navigation.compose.rememberNavController&#10;import com.rodrigoangeloni.flavorfusion.ui.theme.FlavorFusionTheme&#10;import com.rodrigoangeloni.flavorfusion.util.NavegacionApp&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            FlavorFusionTheme {&#10;                Surface(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    color = MaterialTheme.colorScheme.background&#10;                ) {&#10;                    val navController = rememberNavController()&#10;                    NavegacionApp(navController)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/database/BaseDeDatos.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/database/BaseDeDatos.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.database&#10;&#10;import androidx.room.*&#10;import com.rodrigoangeloni.flavorfusion.model.Ingrediente&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;// Entidad para comidas favoritas&#10;@Entity(tableName = &quot;comidas_favoritas&quot;)&#10;data class ComidaFavoritaEntidad(&#10;    @PrimaryKey val id: String,&#10;    val nombre: String,&#10;    val categoria: String,&#10;    val pais: String?,&#10;    val instrucciones: String,&#10;    val urlImagen: String,&#10;    val ingredientes: String // JSON de ingredientes&#10;)&#10;&#10;// Entidad para bebidas favoritas&#10;@Entity(tableName = &quot;bebidas_favoritas&quot;)&#10;data class BebidaFavoritaEntidad(&#10;    @PrimaryKey val id: String,&#10;    val nombre: String,&#10;    val categoria: String,&#10;    val esAlcoholica: Boolean,&#10;    val tipoVaso: String,&#10;    val instrucciones: String,&#10;    val urlImagen: String,&#10;    val ingredientes: String // JSON de ingredientes&#10;)&#10;&#10;// Convertidores para Room&#10;class Convertidores {&#10;    @TypeConverter&#10;    fun deListaAJson(ingredientes: List&lt;Ingrediente&gt;): String {&#10;        return Gson().toJson(ingredientes)&#10;    }&#10;&#10;    @TypeConverter&#10;    fun deJsonALista(json: String): List&lt;Ingrediente&gt; {&#10;        val tipo = object : TypeToken&lt;List&lt;Ingrediente&gt;&gt;() {}.type&#10;        return Gson().fromJson(json, tipo)&#10;    }&#10;}&#10;&#10;// DAO para favoritos&#10;@Dao&#10;interface FavoritosDao {&#10;    @Query(&quot;SELECT * FROM comidas_favoritas&quot;)&#10;    fun obtenerComidasFavoritas(): Flow&lt;List&lt;ComidaFavoritaEntidad&gt;&gt;&#10;&#10;    @Query(&quot;SELECT * FROM bebidas_favoritas&quot;)&#10;    fun obtenerBebidasFavoritas(): Flow&lt;List&lt;BebidaFavoritaEntidad&gt;&gt;&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertarComidaFavorita(comida: ComidaFavoritaEntidad)&#10;&#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertarBebidaFavorita(bebida: BebidaFavoritaEntidad)&#10;&#10;    @Query(&quot;DELETE FROM comidas_favoritas WHERE id = :comidaId&quot;)&#10;    suspend fun eliminarComidaFavorita(comidaId: String)&#10;&#10;    @Query(&quot;DELETE FROM bebidas_favoritas WHERE id = :bebidaId&quot;)&#10;    suspend fun eliminarBebidaFavorita(bebidaId: String)&#10;&#10;    @Query(&quot;SELECT COUNT(*) &gt; 0 FROM comidas_favoritas WHERE id = :comidaId&quot;)&#10;    suspend fun esComidaFavorita(comidaId: String): Boolean&#10;&#10;    @Query(&quot;SELECT COUNT(*) &gt; 0 FROM bebidas_favoritas WHERE id = :bebidaId&quot;)&#10;    suspend fun esBebidaFavorita(bebidaId: String): Boolean&#10;}&#10;&#10;// Base de datos principal&#10;@Database(&#10;    entities = [ComidaFavoritaEntidad::class, BebidaFavoritaEntidad::class],&#10;    version = 1&#10;)&#10;@TypeConverters(Convertidores::class)&#10;abstract class FlavorFusionDB : RoomDatabase() {&#10;    abstract fun favoritosDao(): FavoritosDao&#10;&#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: FlavorFusionDB? = null&#10;&#10;        fun getDatabase(context: Context): FlavorFusionDB {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    FlavorFusionDB::class.java,&#10;                    &quot;flavor_fusion_database&quot;&#10;                )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.database&#10;&#10;import androidx.room.Database&#10;import androidx.room.Room&#10;import androidx.room.RoomDatabase&#10;import android.content.Context&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;&#10;@Database(&#10;    entities = [Receta::class],&#10;    version = 1,&#10;    exportSchema = false&#10;)&#10;abstract class BaseDeDatos : RoomDatabase() {&#10;    &#10;    abstract fun recetaDao(): RecetaDao&#10;    &#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: BaseDeDatos? = null&#10;        &#10;        fun getDatabase(context: Context): BaseDeDatos {&#10;            return INSTANCE ?: synchronized(this) {&#10;                val instance = Room.databaseBuilder(&#10;                    context.applicationContext,&#10;                    BaseDeDatos::class.java,&#10;                    &quot;flavor_fusion_database&quot;&#10;                )&#10;                    .fallbackToDestructiveMigration()&#10;                    .build()&#10;                INSTANCE = instance&#10;                instance&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/database/RecetaDao.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/database/RecetaDao.kt" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.database&#10;&#10;import androidx.room.*&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import kotlinx.coroutines.flow.Flow&#10;&#10;@Dao&#10;interface RecetaDao {&#10;    &#10;    @Query(&quot;SELECT * FROM favoritos ORDER BY fechaAgregado DESC&quot;)&#10;    fun obtenerTodosFavoritos(): Flow&lt;List&lt;Receta&gt;&gt;&#10;    &#10;    @Query(&quot;SELECT * FROM favoritos WHERE id = :id LIMIT 1&quot;)&#10;    suspend fun obtenerRecetaPorId(id: String): Receta?&#10;    &#10;    @Query(&quot;SELECT EXISTS(SELECT 1 FROM favoritos WHERE id = :id)&quot;)&#10;    suspend fun esFavorito(id: String): Boolean&#10;    &#10;    @Insert(onConflict = OnConflictStrategy.REPLACE)&#10;    suspend fun insertarFavorito(receta: Receta)&#10;    &#10;    @Delete&#10;    suspend fun eliminarFavorito(receta: Receta)&#10;    &#10;    @Query(&quot;DELETE FROM favoritos WHERE id = :id&quot;)&#10;    suspend fun eliminarFavoritoPorId(id: String)&#10;    &#10;    @Query(&quot;DELETE FROM favoritos&quot;)&#10;    suspend fun eliminarTodosFavoritos()&#10;    &#10;    @Query(&quot;SELECT COUNT(*) FROM favoritos&quot;)&#10;    suspend fun contarFavoritos(): Int&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/di/AppModule.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/di/AppModule.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.rodrigoangeloni.flavorfusion.database.BaseDeDatos&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Singleton&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    // Proveer API&#10;    @Provides&#10;    @Singleton&#10;    fun provideServicioAPI(): ServicioAPI {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;https://www.themealdb.com/api/json/v1/1/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;            .create(ServicioAPI::class.java)&#10;    }&#10;&#10;    // Proveer base de datos&#10;    @Provides&#10;    @Singleton&#10;    fun provideBaseDeDatos(@ApplicationContext context: Context): BaseDeDatos {&#10;        return BaseDeDatos.getDatabase(context)&#10;    }&#10;&#10;    // Proveer DAO&#10;    @Provides&#10;    fun provideRecetaDao(baseDeDatos: BaseDeDatos): RecetaDao {&#10;        return baseDeDatos.recetaDao()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.di&#10;&#10;import android.content.Context&#10;import androidx.room.Room&#10;import com.rodrigoangeloni.flavorfusion.database.BaseDeDatos&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioBebidas&#10;import dagger.Module&#10;import dagger.Provides&#10;import dagger.hilt.InstallIn&#10;import dagger.hilt.android.qualifiers.ApplicationContext&#10;import dagger.hilt.components.SingletonComponent&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import javax.inject.Qualifier&#10;import javax.inject.Singleton&#10;&#10;@Qualifier&#10;@Retention(AnnotationRetention.BINARY)&#10;annotation class MealRetrofit&#10;&#10;@Qualifier&#10;@Retention(AnnotationRetention.BINARY)&#10;annotation class DrinkRetrofit&#10;&#10;@Module&#10;@InstallIn(SingletonComponent::class)&#10;object AppModule {&#10;&#10;    // Retrofit para comidas (TheMealDB)&#10;    @Provides&#10;    @Singleton&#10;    @MealRetrofit&#10;    fun provideMealRetrofit(): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;https://www.themealdb.com/api/json/v1/1/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    // Retrofit para bebidas (TheCocktailDB)&#10;    @Provides&#10;    @Singleton&#10;    @DrinkRetrofit&#10;    fun provideDrinkRetrofit(): Retrofit {&#10;        return Retrofit.Builder()&#10;            .baseUrl(&quot;https://www.thecocktaildb.com/api/json/v1/1/&quot;)&#10;            .addConverterFactory(GsonConverterFactory.create())&#10;            .build()&#10;    }&#10;&#10;    // Servicio API para comidas&#10;    @Provides&#10;    @Singleton&#10;    fun provideServicioAPI(@MealRetrofit retrofit: Retrofit): ServicioAPI {&#10;        return retrofit.create(ServicioAPI::class.java)&#10;    }&#10;&#10;    // Servicio API para bebidas&#10;    @Provides&#10;    @Singleton&#10;    fun provideServicioBebidas(@DrinkRetrofit retrofit: Retrofit): ServicioBebidas {&#10;        return retrofit.create(ServicioBebidas::class.java)&#10;    }&#10;&#10;    // Proveer base de datos&#10;    @Provides&#10;    @Singleton&#10;    fun provideBaseDeDatos(@ApplicationContext context: Context): BaseDeDatos {&#10;        return BaseDeDatos.getDatabase(context)&#10;    }&#10;&#10;    // Proveer DAO&#10;    @Provides&#10;    fun provideRecetaDao(baseDeDatos: BaseDeDatos): RecetaDao {&#10;        return baseDeDatos.recetaDao()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/model/Receta.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/model/Receta.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.model&#10;&#10;// Clase base para recetas&#10;sealed class Receta {&#10;    // Receta de comida&#10;    data class Comida(&#10;        val id: String,&#10;        val nombre: String,&#10;        val categoria: String,&#10;        val pais: String?,&#10;        val instrucciones: String,&#10;        val urlImagen: String,&#10;        val ingredientes: List&lt;Ingrediente&gt;,&#10;        val esFavorito: Boolean = false&#10;    ) : Receta()&#10;&#10;    // Receta de bebida&#10;    data class Bebida(&#10;        val id: String,&#10;        val nombre: String,&#10;        val categoria: String,&#10;        val esAlcoholica: Boolean,&#10;        val tipoVaso: String,&#10;        val instrucciones: String,&#10;        val urlImagen: String,&#10;        val ingredientes: List&lt;Ingrediente&gt;,&#10;        val esFavorito: Boolean = false&#10;    ) : Receta()&#10;}&#10;&#10;// Modelo para ingredientes&#10;data class Ingrediente(&#10;    val nombre: String,&#10;    val cantidad: String?&#10;)&#10;&#10;// Modelo para categorías&#10;data class Categoria(&#10;    val id: String,&#10;    val nombre: String,&#10;    val urlImagen: String?&#10;)&#10;&#10;// Modelo para países&#10;data class Pais(&#10;    val nombre: String&#10;)" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.model&#13;&#10;&#13;&#10;import androidx.room.Entity&#13;&#10;import androidx.room.PrimaryKey&#13;&#10;&#13;&#10;@Entity(tableName = &quot;favoritos&quot;)&#13;&#10;data class Receta(&#13;&#10;    @PrimaryKey&#13;&#10;    val id: String,&#13;&#10;    val nombre: String,&#13;&#10;    val imagen: String,&#13;&#10;    val categoria: String = &quot;&quot;,&#13;&#10;    val area: String = &quot;&quot;,&#13;&#10;    val instrucciones: String = &quot;&quot;,&#13;&#10;    val ingredientes: String = &quot;&quot;, // JSON string de los ingredientes&#13;&#10;    val tipo: String, // &quot;meal&quot; o &quot;drink&quot;&#13;&#10;    val fechaAgregado: Long = System.currentTimeMillis()&#13;&#10;)&#13;&#10;&#13;&#10;// DTOs para las APIs&#13;&#10;data class MealResponse(&#13;&#10;    val meals: List&lt;MealDTO&gt;?&#13;&#10;)&#13;&#10;&#13;&#10;data class DrinkResponse(&#13;&#10;    val drinks: List&lt;DrinkDTO&gt;?&#13;&#10;)&#13;&#10;&#13;&#10;data class MealDTO(&#13;&#10;    val idMeal: String,&#13;&#10;    val strMeal: String,&#13;&#10;    val strMealThumb: String,&#13;&#10;    val strCategory: String?,&#13;&#10;    val strArea: String?,&#13;&#10;    val strInstructions: String?,&#13;&#10;    val strIngredient1: String?, val strIngredient2: String?, val strIngredient3: String?,&#13;&#10;    val strIngredient4: String?, val strIngredient5: String?, val strIngredient6: String?,&#13;&#10;    val strIngredient7: String?, val strIngredient8: String?, val strIngredient9: String?,&#13;&#10;    val strIngredient10: String?, val strIngredient11: String?, val strIngredient12: String?,&#13;&#10;    val strIngredient13: String?, val strIngredient14: String?, val strIngredient15: String?,&#13;&#10;    val strIngredient16: String?, val strIngredient17: String?, val strIngredient18: String?,&#13;&#10;    val strIngredient19: String?, val strIngredient20: String?,&#13;&#10;    val strMeasure1: String?, val strMeasure2: String?, val strMeasure3: String?,&#13;&#10;    val strMeasure4: String?, val strMeasure5: String?, val strMeasure6: String?,&#13;&#10;    val strMeasure7: String?, val strMeasure8: String?, val strMeasure9: String?,&#13;&#10;    val strMeasure10: String?, val strMeasure11: String?, val strMeasure12: String?,&#13;&#10;    val strMeasure13: String?, val strMeasure14: String?, val strMeasure15: String?,&#13;&#10;    val strMeasure16: String?, val strMeasure17: String?, val strMeasure18: String?,&#13;&#10;    val strMeasure19: String?, val strMeasure20: String?&#13;&#10;)&#13;&#10;&#13;&#10;data class DrinkDTO(&#13;&#10;    val idDrink: String,&#13;&#10;    val strDrink: String,&#13;&#10;    val strDrinkThumb: String,&#13;&#10;    val strCategory: String?,&#13;&#10;    val strGlass: String?,&#13;&#10;    val strInstructions: String?,&#13;&#10;    val strIngredient1: String?, val strIngredient2: String?, val strIngredient3: String?,&#13;&#10;    val strIngredient4: String?, val strIngredient5: String?, val strIngredient6: String?,&#13;&#10;    val strIngredient7: String?, val strIngredient8: String?, val strIngredient9: String?,&#13;&#10;    val strIngredient10: String?, val strIngredient11: String?, val strIngredient12: String?,&#13;&#10;    val strIngredient13: String?, val strIngredient14: String?, val strIngredient15: String?,&#13;&#10;    val strMeasure1: String?, val strMeasure2: String?, val strMeasure3: String?,&#13;&#10;    val strMeasure4: String?, val strMeasure5: String?, val strMeasure6: String?,&#13;&#10;    val strMeasure7: String?, val strMeasure8: String?, val strMeasure9: String?,&#13;&#10;    val strMeasure10: String?, val strMeasure11: String?, val strMeasure12: String?,&#13;&#10;    val strMeasure13: String?, val strMeasure14: String?, val strMeasure15: String?&#13;&#10;)&#13;&#10;&#13;&#10;// Funciones de extensión para convertir DTOs a Receta&#13;&#10;fun MealDTO.toReceta(): Receta {&#13;&#10;    val ingredientes = mutableListOf&lt;String&gt;()&#13;&#10;    val medidas = listOf(&#13;&#10;        strMeasure1, strMeasure2, strMeasure3, strMeasure4, strMeasure5,&#13;&#10;        strMeasure6, strMeasure7, strMeasure8, strMeasure9, strMeasure10,&#13;&#10;        strMeasure11, strMeasure12, strMeasure13, strMeasure14, strMeasure15,&#13;&#10;        strMeasure16, strMeasure17, strMeasure18, strMeasure19, strMeasure20&#13;&#10;    )&#13;&#10;    val ingredientesList = listOf(&#13;&#10;        strIngredient1, strIngredient2, strIngredient3, strIngredient4, strIngredient5,&#13;&#10;        strIngredient6, strIngredient7, strIngredient8, strIngredient9, strIngredient10,&#13;&#10;        strIngredient11, strIngredient12, strIngredient13, strIngredient14, strIngredient15,&#13;&#10;        strIngredient16, strIngredient17, strIngredient18, strIngredient19, strIngredient20&#13;&#10;    )&#13;&#10;    &#13;&#10;    ingredientesList.forEachIndexed { index, ingrediente -&gt;&#13;&#10;        if (!ingrediente.isNullOrBlank()) {&#13;&#10;            val medida = medidas.getOrNull(index) ?: &quot;&quot;&#13;&#10;            ingredientes.add(&quot;$medida $ingrediente&quot;.trim())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    return Receta(&#13;&#10;        id = idMeal,&#13;&#10;        nombre = strMeal,&#13;&#10;        imagen = strMealThumb,&#13;&#10;        categoria = strCategory ?: &quot;&quot;,&#13;&#10;        area = strArea ?: &quot;&quot;,&#13;&#10;        instrucciones = strInstructions ?: &quot;&quot;,&#13;&#10;        ingredientes = ingredientes.joinToString(&quot;||&quot;), // Separador para almacenar en DB&#13;&#10;        tipo = &quot;meal&quot;&#13;&#10;    )&#13;&#10;}&#13;&#10;&#13;&#10;fun DrinkDTO.toReceta(): Receta {&#13;&#10;    val ingredientes = mutableListOf&lt;String&gt;()&#13;&#10;    val medidas = listOf(&#13;&#10;        strMeasure1, strMeasure2, strMeasure3, strMeasure4, strMeasure5,&#13;&#10;        strMeasure6, strMeasure7, strMeasure8, strMeasure9, strMeasure10,&#13;&#10;        strMeasure11, strMeasure12, strMeasure13, strMeasure14, strMeasure15&#13;&#10;    )&#13;&#10;    val ingredientesList = listOf(&#13;&#10;        strIngredient1, strIngredient2, strIngredient3, strIngredient4, strIngredient5,&#13;&#10;        strIngredient6, strIngredient7, strIngredient8, strIngredient9, strIngredient10,&#13;&#10;        strIngredient11, strIngredient12, strIngredient13, strIngredient14, strIngredient15&#13;&#10;    )&#13;&#10;    &#13;&#10;    ingredientesList.forEachIndexed { index, ingrediente -&gt;&#13;&#10;        if (!ingrediente.isNullOrBlank()) {&#13;&#10;            val medida = medidas.getOrNull(index) ?: &quot;&quot;&#13;&#10;            ingredientes.add(&quot;$medida $ingrediente&quot;.trim())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    &#13;&#10;    return Receta(&#13;&#10;        id = idDrink,&#13;&#10;        nombre = strDrink,&#13;&#10;        imagen = strDrinkThumb,&#13;&#10;        categoria = strCategory ?: &quot;&quot;,&#13;&#10;        area = strGlass ?: &quot;&quot;, // Para bebidas, usamos el tipo de vaso como &quot;area&quot;&#13;&#10;        instrucciones = strInstructions ?: &quot;&quot;,&#13;&#10;        ingredientes = ingredientes.joinToString(&quot;||&quot;),&#13;&#10;        tipo = &quot;drink&quot;&#13;&#10;    )&#13;&#10;}&#13;&#10;&#13;&#10;// Función para obtener los ingredientes como lista&#13;&#10;fun Receta.getIngredientesList(): List&lt;String&gt; {&#13;&#10;    return if (ingredientes.isBlank()) emptyList() else ingredientes.split(&quot;||&quot;)&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/network/ServicioAPI.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/network/ServicioAPI.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.network&#10;&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;// Respuestas de API para comidas&#10;data class RespuestaComidas(val meals: List&lt;ComidaDTO&gt;?)&#10;&#10;data class ComidaDTO(&#10;    val idMeal: String,&#10;    val strMeal: String,&#10;    val strCategory: String?,&#10;    val strArea: String?,&#10;    val strInstructions: String?,&#10;    val strMealThumb: String?,&#10;    val strYoutube: String?,&#10;    val strIngredient1: String?,&#10;    val strIngredient2: String?,&#10;    val strIngredient3: String?,&#10;    // ... más ingredientes&#10;    val strMeasure1: String?,&#10;    val strMeasure2: String?,&#10;    val strMeasure3: String?&#10;    // ... más medidas&#10;)&#10;&#10;// Respuestas de API para bebidas&#10;data class RespuestaBebidas(val drinks: List&lt;BebidaDTO&gt;?)&#10;&#10;data class BebidaDTO(&#10;    val idDrink: String,&#10;    val strDrink: String,&#10;    val strCategory: String?,&#10;    val strAlcoholic: String?,&#10;    val strGlass: String?,&#10;    val strInstructions: String?,&#10;    val strDrinkThumb: String?,&#10;    val strIngredient1: String?,&#10;    val strIngredient2: String?,&#10;    val strIngredient3: String?,&#10;    // ... más ingredientes&#10;    val strMeasure1: String?,&#10;    val strMeasure2: String?,&#10;    val strMeasure3: String?&#10;    // ... más medidas&#10;)&#10;&#10;// API de comidas&#10;interface ServicioAPIComidas {&#10;    @GET(&quot;search.php&quot;)&#10;    suspend fun buscarComidas(@Query(&quot;s&quot;) busqueda: String): RespuestaComidas&#10;&#10;    @GET(&quot;filter.php&quot;)&#10;    suspend fun obtenerComidasPorCategoria(@Query(&quot;c&quot;) categoria: String): RespuestaComidas&#10;&#10;    @GET(&quot;random.php&quot;)&#10;    suspend fun obtenerComidaAleatoria(): RespuestaComidas&#10;&#10;    @GET(&quot;lookup.php&quot;)&#10;    suspend fun obtenerDetalleComida(@Query(&quot;i&quot;) id: String): RespuestaComidas&#10;}&#10;&#10;// API de bebidas&#10;interface ServicioAPIBebidas {&#10;    @GET(&quot;search.php&quot;)&#10;    suspend fun buscarBebidas(@Query(&quot;s&quot;) busqueda: String): RespuestaBebidas&#10;&#10;    @GET(&quot;filter.php&quot;)&#10;    suspend fun obtenerBebidasPorCategoria(@Query(&quot;c&quot;) categoria: String): RespuestaBebidas&#10;&#10;    @GET(&quot;random.php&quot;)&#10;    suspend fun obtenerBebidaAleatoria(): RespuestaBebidas&#10;&#10;    @GET(&quot;lookup.php&quot;)&#10;    suspend fun obtenerDetalleBebida(@Query(&quot;i&quot;) id: String): RespuestaBebidas&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.network&#10;&#10;import com.rodrigoangeloni.flavorfusion.model.DrinkResponse&#10;import com.rodrigoangeloni.flavorfusion.model.MealResponse&#10;import retrofit2.http.GET&#10;import retrofit2.http.Query&#10;&#10;interface ServicioAPI {&#10;    &#10;    // Endpoints para comidas (TheMealDB)&#10;    @GET(&quot;search.php&quot;)&#10;    suspend fun buscarComidas(@Query(&quot;s&quot;) query: String): MealResponse&#10;    &#10;    @GET(&quot;random.php&quot;)&#10;    suspend fun obtenerComidaAleatoria(): MealResponse&#10;    &#10;    @GET(&quot;lookup.php&quot;)&#10;    suspend fun obtenerDetalleComida(@Query(&quot;i&quot;) id: String): MealResponse&#10;}&#10;&#10;interface ServicioBebidas {&#10;    &#10;    // Endpoints para bebidas (TheCocktailDB)&#10;    @GET(&quot;search.php&quot;)&#10;    suspend fun buscarBebidas(@Query(&quot;s&quot;) query: String): DrinkResponse&#10;    &#10;    @GET(&quot;random.php&quot;)&#10;    suspend fun obtenerBebidaAleatoria(): DrinkResponse&#10;    &#10;    @GET(&quot;lookup.php&quot;)&#10;    suspend fun obtenerDetalleBebida(@Query(&quot;i&quot;) id: String): DrinkResponse&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/repository/RecetasRepositorio.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/repository/RecetasRepositorio.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.repository&#10;&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.model.*&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class RecetasRepositorio @Inject constructor(&#10;    private val servicioAPI: ServicioAPI,&#10;    private val recetaDao: RecetaDao&#10;) {&#10;    &#10;    // Operaciones de API&#10;    suspend fun buscarComidas(query: String): MealResponse? {&#10;        return try {&#10;            servicioAPI.buscarComidas(query)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun buscarBebidas(query: String): DrinkResponse? {&#10;        return try {&#10;            servicioAPI.buscarBebidas(query)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerComidaAleatoria(): MealResponse? {&#10;        return try {&#10;            servicioAPI.obtenerComidaAleatoria()&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerBebidaAleatoria(): DrinkResponse? {&#10;        return try {&#10;            servicioAPI.obtenerBebidaAleatoria()&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleComida(id: String): MealResponse? {&#10;        return try {&#10;            servicioAPI.obtenerDetalleComida(id)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleBebida(id: String): DrinkResponse? {&#10;        return try {&#10;            servicioAPI.obtenerDetalleBebida(id)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Operaciones de favoritos&#10;    fun obtenerFavoritos(): Flow&lt;List&lt;Receta&gt;&gt; {&#10;        return recetaDao.obtenerTodosFavoritos()&#10;    }&#10;    &#10;    suspend fun esFavorito(id: String): Boolean {&#10;        return recetaDao.esFavorito(id)&#10;    }&#10;    &#10;    suspend fun agregarFavorito(receta: Receta) {&#10;        recetaDao.insertarFavorito(receta)&#10;    }&#10;    &#10;    suspend fun eliminarFavorito(id: String) {&#10;        recetaDao.eliminarFavoritoPorId(id)&#10;    }&#10;    &#10;    suspend fun alternarFavorito(receta: Receta) {&#10;        if (esFavorito(receta.id)) {&#10;            eliminarFavorito(receta.id)&#10;        } else {&#10;            agregarFavorito(receta)&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.repository&#10;&#10;import com.rodrigoangeloni.flavorfusion.database.RecetaDao&#10;import com.rodrigoangeloni.flavorfusion.model.*&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioAPI&#10;import com.rodrigoangeloni.flavorfusion.network.ServicioBebidas&#10;import kotlinx.coroutines.flow.Flow&#10;import javax.inject.Inject&#10;import javax.inject.Singleton&#10;&#10;@Singleton&#10;class RecetasRepositorio @Inject constructor(&#10;    private val servicioAPI: ServicioAPI,&#10;    private val servicioBebidas: ServicioBebidas,&#10;    private val recetaDao: RecetaDao&#10;) {&#10;    &#10;    // Operaciones de API para comidas&#10;    suspend fun buscarComidas(query: String): MealResponse? {&#10;        return try {&#10;            servicioAPI.buscarComidas(query)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerComidaAleatoria(): MealResponse? {&#10;        return try {&#10;            servicioAPI.obtenerComidaAleatoria()&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleComida(id: String): MealResponse? {&#10;        return try {&#10;            servicioAPI.obtenerDetalleComida(id)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Operaciones de API para bebidas&#10;    suspend fun buscarBebidas(query: String): DrinkResponse? {&#10;        return try {&#10;            servicioBebidas.buscarBebidas(query)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerBebidaAleatoria(): DrinkResponse? {&#10;        return try {&#10;            servicioBebidas.obtenerBebidaAleatoria()&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    suspend fun obtenerDetalleBebida(id: String): DrinkResponse? {&#10;        return try {&#10;            servicioBebidas.obtenerDetalleBebida(id)&#10;        } catch (e: Exception) {&#10;            null&#10;        }&#10;    }&#10;    &#10;    // Operaciones de favoritos&#10;    fun obtenerFavoritos(): Flow&lt;List&lt;Receta&gt;&gt; {&#10;        return recetaDao.obtenerTodosFavoritos()&#10;    }&#10;    &#10;    suspend fun esFavorito(id: String): Boolean {&#10;        return recetaDao.esFavorito(id)&#10;    }&#10;    &#10;    suspend fun agregarFavorito(receta: Receta) {&#10;        recetaDao.insertarFavorito(receta)&#10;    }&#10;    &#10;    suspend fun eliminarFavorito(id: String) {&#10;        recetaDao.eliminarFavoritoPorId(id)&#10;    }&#10;    &#10;    suspend fun alternarFavorito(receta: Receta) {&#10;        if (esFavorito(receta.id)) {&#10;            eliminarFavorito(receta.id)&#10;        } else {&#10;            agregarFavorito(receta)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaDetalleReceta.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaDetalleReceta.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaDetalleReceta(&#10;    recipeId: String,&#10;    recipeType: String,&#10;    onNavigateUp: () -&gt; Unit,&#10;    viewModel: InicioViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;&#10;    // Usar LaunchedEffect para cargar el detalle al entrar en la pantalla&#10;    LaunchedEffect(key1 = recipeId) {&#10;        if (recipeType == &quot;meal&quot;) {&#10;            viewModel.cargarDetalleComida(recipeId)&#10;        } else {&#10;            viewModel.cargarDetalleBebida(recipeId)&#10;        }&#10;    }&#10;&#10;    val receta = if (recipeType == &quot;meal&quot;) {&#10;        uiState.detalleComida&#10;    } else {&#10;        uiState.detalleBebida&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = when (receta) {&#10;                            is Receta.Comida -&gt; receta.nombre&#10;                            is Receta.Bebida -&gt; receta.nombre&#10;                            null -&gt; stringResource(R.string.titulo_detalle_receta)&#10;                        }&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = stringResource(R.string.regresar)&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    IconButton(onClick = {&#10;                        receta?.let { currentReceta -&gt;&#10;                            when (currentReceta) {&#10;                                is Receta.Comida -&gt; viewModel.marcarComidaComoFavorita(currentReceta)&#10;                                is Receta.Bebida -&gt; viewModel.marcarBebidaComoFavorita(currentReceta)&#10;                            }&#10;                        }&#10;                    }) {&#10;                        val isFavorite = when (receta) {&#10;                            is Receta.Comida -&gt; receta.esFavorito&#10;                            is Receta.Bebida -&gt; receta.esFavorito&#10;                            null -&gt; false&#10;                        }&#10;                        Icon(&#10;                            imageVector = if (isFavorite) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                            contentDescription = if (isFavorite) {&#10;                                stringResource(R.string.quitar_favorito)&#10;                            } else {&#10;                                stringResource(R.string.marcar_favorito)&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        if (uiState.estaCargando) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (uiState.error != null) {&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Text(uiState.error!!)&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Button(onClick = {&#10;                        if (recipeType == &quot;meal&quot;) {&#10;                            viewModel.cargarDetalleComida(recipeId)&#10;                        } else {&#10;                            viewModel.cargarDetalleBebida(recipeId)&#10;                        }&#10;                    }) {&#10;                        Text(stringResource(R.string.reintentar))&#10;                    }&#10;                }&#10;            }&#10;        } else if (receta != null) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .verticalScroll(scrollState)&#10;            ) {&#10;                // Imagen de la receta&#10;                AsyncImage(&#10;                    model = ImageRequest.Builder(LocalContext.current)&#10;                        .data(&#10;                            when (receta) {&#10;                                is Receta.Comida -&gt; receta.urlImagen&#10;                                is Receta.Bebida -&gt; receta.urlImagen&#10;                            }&#10;                        )&#10;                        .crossfade(true)&#10;                        .build(),&#10;                    contentDescription = when (receta) {&#10;                        is Receta.Comida -&gt; receta.nombre&#10;                        is Receta.Bebida -&gt; receta.nombre&#10;                    },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(250.dp),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;&#10;                // Información de la receta&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = when (receta) {&#10;                            is Receta.Comida -&gt; receta.nombre&#10;                            is Receta.Bebida -&gt; receta.nombre&#10;                        },&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Category,&#10;                            contentDescription = null,&#10;                            tint = MaterialTheme.colorScheme.primary,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(4.dp))&#10;                        Text(&#10;                            text = stringResource(R.string.categoria) + &quot;: &quot; + when (receta) {&#10;                                is Receta.Comida -&gt; receta.categoria&#10;                                is Receta.Bebida -&gt; receta.categoria&#10;                            },&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                        )&#10;                    }&#10;&#10;                    // Información específica según el tipo de receta&#10;                    when (receta) {&#10;                        is Receta.Comida -&gt; {&#10;                            receta.pais?.let { pais -&gt;&#10;                                Spacer(modifier = Modifier.height(4.dp))&#10;                                Row(&#10;                                    verticalAlignment = Alignment.CenterVertically&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Public,&#10;                                        contentDescription = null,&#10;                                        tint = MaterialTheme.colorScheme.primary,&#10;                                        modifier = Modifier.size(16.dp)&#10;                                    )&#10;                                    Spacer(modifier = Modifier.width(4.dp))&#10;                                    Text(&#10;                                        text = stringResource(R.string.pais_origen) + &quot;: &quot; + pais,&#10;                                        style = MaterialTheme.typography.bodyMedium,&#10;                                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;                        is Receta.Bebida -&gt; {&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.LocalBar,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(4.dp))&#10;                                Text(&#10;                                    text = stringResource(R.string.tipo_vaso) + &quot;: &quot; + receta.tipoVaso,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;&#10;                            Spacer(modifier = Modifier.height(4.dp))&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = if (receta.esAlcoholica) Icons.Default.LocalBar else Icons.Default.Coffee,&#10;                                    contentDescription = null,&#10;                                    tint = MaterialTheme.colorScheme.primary,&#10;                                    modifier = Modifier.size(16.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(4.dp))&#10;                                Text(&#10;                                    text = if (receta.esAlcoholica) {&#10;                                        stringResource(R.string.alcoholica)&#10;                                    } else {&#10;                                        stringResource(R.string.no_alcoholica)&#10;                                    },&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Ingredientes&#10;                    Text(&#10;                        text = stringResource(R.string.ingredientes),&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    val ingredientes = when (receta) {&#10;                        is Receta.Comida -&gt; receta.ingredientes&#10;                        is Receta.Bebida -&gt; receta.ingredientes&#10;                    }&#10;&#10;                    ingredientes.forEach { ingrediente -&gt;&#10;                        Row(&#10;                            modifier = Modifier.padding(vertical = 4.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.FiberManualRecord,&#10;                                contentDescription = null,&#10;                                tint = MaterialTheme.colorScheme.primary,&#10;                                modifier = Modifier&#10;                                    .size(10.dp)&#10;                                    .padding(top = 6.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&#10;                                text = &quot;${ingrediente.nombre} ${ingrediente.cantidad ?: &quot;&quot;}&quot;.trim(),&#10;                                style = MaterialTheme.typography.bodyMedium&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    // Instrucciones&#10;                    Text(&#10;                        text = stringResource(R.string.instrucciones),&#10;                        style = MaterialTheme.typography.titleLarge,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        text = when (receta) {&#10;                            is Receta.Comida -&gt; receta.instrucciones&#10;                            is Receta.Bebida -&gt; receta.instrucciones&#10;                        },&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        lineHeight = MaterialTheme.typography.bodyMedium.lineHeight&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;            }&#10;        } else {&#10;            // Estado cuando no hay receta cargada&#10;            Box(&#10;                modifier = Modifier.fillMaxSize(),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = &quot;No se encontró información de la receta&quot;,&#10;                    style = MaterialTheme.typography.bodyLarge&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import coil.request.ImageRequest&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaDetalleReceta(&#10;    recipeId: String,&#10;    recipeType: String,&#10;    onNavigateUp: () -&gt; Unit,&#10;    viewModel: InicioViewModel = hiltViewModel()&#10;) {&#10;    val scrollState = rememberScrollState()&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    &#10;    // Obtener estado de favorito usando LaunchedEffect&#10;    var esFavorito by remember { mutableStateOf(false) }&#10;    &#10;    LaunchedEffect(key1 = recipeId) {&#10;        if (recipeType == &quot;meal&quot;) {&#10;            viewModel.cargarDetalleComida(recipeId)&#10;        } else {&#10;            viewModel.cargarDetalleBebida(recipeId)&#10;        }&#10;        // Verificar si es favorito&#10;        esFavorito = viewModel.esFavorito(recipeId)&#10;    }&#10;&#10;    val receta = if (recipeType == &quot;meal&quot;) {&#10;        uiState.detalleComida&#10;    } else {&#10;        uiState.detalleBebida&#10;    }&#10;&#10;    // Observar cambios en favoritos&#10;    LaunchedEffect(uiState.favoritosIds) {&#10;        esFavorito = uiState.favoritosIds.contains(recipeId)&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = {&#10;                    Text(&#10;                        text = receta?.nombre ?: stringResource(R.string.titulo_detalle_receta)&#10;                    )&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(&#10;                            Icons.AutoMirrored.Filled.ArrowBack,&#10;                            contentDescription = stringResource(R.string.regresar)&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    receta?.let { currentReceta -&gt;&#10;                        IconButton(&#10;                            onClick = { &#10;                                viewModel.alternarFavorito(currentReceta)&#10;                            }&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                                contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                                tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        if (uiState.estaCargando) {&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                CircularProgressIndicator()&#10;            }&#10;        } else if (receta != null) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues)&#10;                    .verticalScroll(scrollState)&#10;            ) {&#10;                // Imagen principal&#10;                AsyncImage(&#10;                    model = ImageRequest.Builder(LocalContext.current)&#10;                        .data(receta.imagen)&#10;                        .crossfade(true)&#10;                        .build(),&#10;                    contentDescription = receta.nombre,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(250.dp),&#10;                    contentScale = ContentScale.Crop&#10;                )&#10;&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp)&#10;                ) {&#10;                    // Título&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.headlineMedium,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    // Información adicional&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = &quot;Categoría: ${receta.categoria}&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(bottom = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = if (receta.tipo == &quot;meal&quot;) &quot;Origen: ${receta.area}&quot; else &quot;Tipo: ${receta.area}&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(bottom = 16.dp)&#10;                        )&#10;                    }&#10;&#10;                    // Ingredientes&#10;                    if (receta.ingredientes.isNotBlank()) {&#10;                        Text(&#10;                            text = &quot;Ingredientes:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            modifier = Modifier.padding(bottom = 8.dp)&#10;                        )&#10;&#10;                        val ingredientesList = receta.getIngredientesList()&#10;                        ingredientesList.forEach { ingrediente -&gt;&#10;                            if (ingrediente.isNotBlank()) {&#10;                                Text(&#10;                                    text = &quot;• $ingrediente&quot;,&#10;                                    style = MaterialTheme.typography.bodyMedium,&#10;                                    modifier = Modifier.padding(bottom = 4.dp)&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;                    }&#10;&#10;                    // Instrucciones&#10;                    if (receta.instrucciones.isNotBlank()) {&#10;                        Text(&#10;                            text = &quot;Instrucciones:&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            fontWeight = FontWeight.Bold,&#10;                            modifier = Modifier.padding(bottom = 8.dp)&#10;                        )&#10;&#10;                        Text(&#10;                            text = receta.instrucciones,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            lineHeight = 20.sp&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        } else {&#10;            // Estado de error&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxSize()&#10;                    .padding(paddingValues),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Error,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(64.dp),&#10;                        tint = MaterialTheme.colorScheme.error&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;Error al cargar la receta&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Button(&#10;                        onClick = {&#10;                            if (recipeType == &quot;meal&quot;) {&#10;                                viewModel.cargarDetalleComida(recipeId)&#10;                            } else {&#10;                                viewModel.cargarDetalleBebida(recipeId)&#10;                            }&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Reintentar&quot;)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarBebidas.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarBebidas.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarBebidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Bebidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar bebidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: mojito, coffee, beer&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarBebidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarBebidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando bebidas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaBebidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaBebidas) { receta -&gt;&#10;                            TarjetaRecetaBebida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;drink&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaBebidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron bebidas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'mojito', 'coffee' o 'beer'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontales&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Bebidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu bebida favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarBebidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaBebida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Tipo: ${receta.area}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarBebidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Bebidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar bebidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: mojito, coffee, beer&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarBebidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarBebidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando bebidas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaBebidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaBebidas) { receta -&gt;&#10;                            TarjetaRecetaBebida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;drink&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaBebidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron bebidas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'mojito', 'coffee' o 'beer'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Bebidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu bebida favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarBebidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaBebida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Tipo: ${receta.area}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarComidas.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarComidas.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material.icons.filled.Fastfood&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.components.BarraBusqueda&#10;import com.rodrigoangeloni.flavorfusion.components.BarraBusquedaAvanzada&#10;import com.rodrigoangeloni.flavorfusion.components.MensajeError&#10;import com.rodrigoangeloni.flavorfusion.components.TarjetaReceta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarComidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(stringResource(R.string.titulo_explorar_comidas)) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = stringResource(R.string.regresar))&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            // Barra de búsqueda avanzada con traducción&#10;            BarraBusquedaAvanzada(&#10;                consulta = searchQuery,&#10;                onConsultaCambiada = {&#10;                    searchQuery = it&#10;                    if (it.isEmpty()) {&#10;                        viewModel.limpiarResultadosBusqueda()&#10;                    }&#10;                },&#10;                placeholder = stringResource(R.string.buscar_comidas_placeholder),&#10;                onBuscar = {&#10;                    if (searchQuery.isNotBlank()) {&#10;                        viewModel.buscarComidas(searchQuery)&#10;                    }&#10;                },&#10;                esComida = true&#10;            )&#10;&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = androidx.compose.ui.Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = androidx.compose.ui.Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = stringResource(R.string.cargando),&#10;                                style = MaterialTheme.typography.bodyMedium&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                uiState.resultadosBusquedaComidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(vertical = 8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaComidas) { comida -&gt;&#10;                            TarjetaReceta(&#10;                                titulo = stringResource(R.string.resultado_busqueda),&#10;                                nombre = comida.nombre,&#10;                                categoria = comida.categoria,&#10;                                urlImagen = comida.urlImagen,&#10;                                onClick = { onNavigateToDetail(comida.id) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaComidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = androidx.compose.ui.Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = androidx.compose.ui.Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Search,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = stringResource(R.string.sin_resultados, searchQuery),&#10;                                style = MaterialTheme.typography.bodyLarge,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                uiState.estaCargando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = androidx.compose.ui.Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = androidx.compose.ui.Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = stringResource(R.string.cargando),&#10;                                style = MaterialTheme.typography.bodyMedium&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                uiState.error != null -&gt; {&#10;                    MensajeError(&#10;                        mensaje = uiState.error!!,&#10;                        onReintentar = viewModel::cargarSugerenciasAleatorias&#10;                    )&#10;                }&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentPadding = PaddingValues(vertical = 8.dp),&#10;                        verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        // Mostrar comida sugerida si existe&#10;                        uiState.comidaSugerida?.let { comida -&gt;&#10;                            item {&#10;                                TarjetaReceta(&#10;                                    titulo = stringResource(R.string.comida_destacada),&#10;                                    nombre = comida.nombre,&#10;                                    categoria = comida.categoria,&#10;                                    urlImagen = comida.urlImagen,&#10;                                    onClick = { onNavigateToDetail(comida.id) }&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Mostrar mensaje si no hay comida sugerida&#10;                        if (uiState.comidaSugerida == null) {&#10;                            item {&#10;                                Card(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(horizontal = 16.dp)&#10;                                ) {&#10;                                    Column(&#10;                                        modifier = Modifier.padding(16.dp),&#10;                                        horizontalAlignment = Alignment.CenterHorizontally&#10;                                    ) {&#10;                                        Icon(&#10;                                            imageVector = Icons.Default.Fastfood,&#10;                                            contentDescription = null,&#10;                                            modifier = Modifier.size(48.dp),&#10;                                            tint = MaterialTheme.colorScheme.primary&#10;                                        )&#10;                                        Spacer(modifier = Modifier.height(8.dp))&#10;                                        Text(&#10;                                            text = &quot;¡Busca tus recetas favoritas!&quot;,&#10;                                            style = MaterialTheme.typography.headlineSmall,&#10;                                            textAlign = TextAlign.Center&#10;                                        )&#10;                                        Spacer(modifier = Modifier.height(4.dp))&#10;                                        Text(&#10;                                            text = &quot;Escribe 'pollo', 'pasta', 'tacos' o cualquier comida en español&quot;,&#10;                                            style = MaterialTheme.typography.bodyMedium,&#10;                                            textAlign = TextAlign.Center,&#10;                                            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                                        )&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarComidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Comidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar comidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: pasta, chicken, pizza&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarComidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarComidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando recetas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaComidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaComidas) { receta -&gt;&#10;                            TarjetaRecetaComida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;meal&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaComidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron recetas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'pasta', 'chicken' o 'beef'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontales&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Comidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu receta favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarComidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaComida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaFavoritos.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaFavoritos.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import com.rodrigoangeloni.flavorfusion.components.TarjetaReceta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaFavoritos(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateUp: () -&gt; Unit,&#10;    onMealClick: (String) -&gt; Unit,&#10;    onCocktailClick: (String) -&gt; Unit&#10;) {&#10;    var selectedTab by remember { mutableStateOf(0) }&#10;    val tabs = listOf(&quot;Comidas&quot;, &quot;Bebidas&quot;)&#10;&#10;    // Datos de ejemplo para favoritos&#10;    val favoriteMeals = listOf(&#10;        Triple(&quot;1&quot;, &quot;Paella Valenciana&quot;, &quot;Plato Principal&quot;),&#10;        Triple(&quot;2&quot;, &quot;Pasta Carbonara&quot;, &quot;Pasta&quot;),&#10;        Triple(&quot;3&quot;, &quot;Sushi Roll&quot;, &quot;Japonesa&quot;)&#10;    )&#10;&#10;    val favoriteCocktails = listOf(&#10;        Triple(&quot;1&quot;, &quot;Mojito Clásico&quot;, &quot;Cóctel&quot;),&#10;        Triple(&quot;2&quot;, &quot;Margarita&quot;, &quot;Cóctel&quot;),&#10;        Triple(&quot;3&quot;, &quot;Piña Colada&quot;, &quot;Cóctel Tropical&quot;)&#10;    )&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Mis Favoritos&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;        ) {&#10;            // Tabs para alternar entre comidas y bebidas&#10;            TabRow(selectedTabIndex = selectedTab) {&#10;                tabs.forEachIndexed { index, title -&gt;&#10;                    Tab(&#10;                        selected = selectedTab == index,&#10;                        onClick = { selectedTab = index },&#10;                        text = { Text(title) },&#10;                        icon = {&#10;                            Icon(&#10;                                imageVector = if (index == 0) Icons.Default.Home else Icons.Default.Star,&#10;                                contentDescription = null&#10;                            )&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Contenido según la tab seleccionada&#10;            when (selectedTab) {&#10;                0 -&gt; {&#10;                    // Favoritos de comidas&#10;                    if (favoriteMeals.isEmpty()) {&#10;                        EmptyFavoritesView(&#10;                            message = &quot;No tienes comidas favoritas&quot;,&#10;                            icon = Icons.Default.Home&#10;                        )&#10;                    } else {&#10;                        LazyColumn(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentPadding = PaddingValues(vertical = 8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(favoriteMeals) { (id, name, category) -&gt;&#10;                                TarjetaReceta(&#10;                                    titulo = &quot;Comida favorita&quot;,&#10;                                    nombre = name,&#10;                                    categoria = category,&#10;                                    urlImagen = &quot;https://via.placeholder.com/300x200&quot;,&#10;                                    onClick = { onMealClick(id) }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                1 -&gt; {&#10;                    // Favoritos de bebidas&#10;                    if (favoriteCocktails.isEmpty()) {&#10;                        EmptyFavoritesView(&#10;                            message = &quot;No tienes bebidas favoritas&quot;,&#10;                            icon = Icons.Default.Star&#10;                        )&#10;                    } else {&#10;                        LazyColumn(&#10;                            modifier = Modifier.fillMaxSize(),&#10;                            contentPadding = PaddingValues(vertical = 8.dp),&#10;                            verticalArrangement = Arrangement.spacedBy(8.dp)&#10;                        ) {&#10;                            items(favoriteCocktails) { (id, name, category) -&gt;&#10;                                TarjetaReceta(&#10;                                    titulo = &quot;Bebida favorita&quot;,&#10;                                    nombre = name,&#10;                                    categoria = category,&#10;                                    urlImagen = &quot;https://via.placeholder.com/300x200&quot;,&#10;                                    onClick = { onCocktailClick(id) }&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyFavoritesView(&#10;    message: String,&#10;    icon: androidx.compose.ui.graphics.vector.ImageVector&#10;) {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = null,&#10;            modifier = Modifier.size(64.dp),&#10;            tint = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.6f)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = message,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Medium,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        Text(&#10;            text = &quot;Explora recetas y marca tus favoritas para verlas aquí&quot;,&#10;            color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.8f),&#10;            fontSize = 14.sp&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.lazy.LazyColumn&#13;&#10;import androidx.compose.foundation.lazy.items&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.Favorite&#13;&#10;import androidx.compose.material.icons.filled.RestaurantMenu&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.res.stringResource&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.text.style.TextAlign&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import coil.compose.AsyncImage&#13;&#10;import com.rodrigoangeloni.flavorfusion.R&#13;&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#13;&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun PantallaFavoritos(&#13;&#10;    onRecetaClick: (String, String) -&gt; Unit,&#13;&#10;    viewModel: InicioViewModel = hiltViewModel()&#13;&#10;) {&#13;&#10;    val favoritos by viewModel.favoritos.collectAsState()&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxSize()&#13;&#10;            .padding(16.dp)&#13;&#10;    ) {&#13;&#10;        // Título&#13;&#10;        Text(&#13;&#10;            text = &quot;Mis Favoritos&quot;,&#13;&#10;            style = MaterialTheme.typography.headlineMedium,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            modifier = Modifier.padding(bottom = 16.dp)&#13;&#10;        )&#13;&#10;&#13;&#10;        if (favoritos.isEmpty()) {&#13;&#10;            // Estado vacío&#13;&#10;            Column(&#13;&#10;                modifier = Modifier.fillMaxSize(),&#13;&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;                verticalArrangement = Arrangement.Center&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = Icons.Default.Favorite,&#13;&#10;                    contentDescription = null,&#13;&#10;                    modifier = Modifier.size(64.dp),&#13;&#10;                    tint = MaterialTheme.colorScheme.outline&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;                Text(&#13;&#10;                    text = &quot;No tienes favoritos aún&quot;,&#13;&#10;                    style = MaterialTheme.typography.headlineSmall,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#13;&#10;                    textAlign = TextAlign.Center&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                Text(&#13;&#10;                    text = &quot;Explora recetas y marca tus favoritas tocando el corazón ❤️&quot;,&#13;&#10;                    style = MaterialTheme.typography.bodyMedium,&#13;&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#13;&#10;                    textAlign = TextAlign.Center,&#13;&#10;                    modifier = Modifier.padding(horizontal = 32.dp)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            // Lista de favoritos&#13;&#10;            LazyColumn(&#13;&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#13;&#10;            ) {&#13;&#10;                items(favoritos) { receta -&gt;&#13;&#10;                    TarjetaFavorito(&#13;&#10;                        receta = receta,&#13;&#10;                        onClick = { onRecetaClick(receta.id, receta.tipo) },&#13;&#10;                        onToggleFavorito = { viewModel.alternarFavorito(receta) }&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun TarjetaFavorito(&#13;&#10;    receta: Receta,&#13;&#10;    onClick: () -&gt; Unit,&#13;&#10;    onToggleFavorito: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Card(&#13;&#10;        onClick = onClick,&#13;&#10;        modifier = Modifier.fillMaxWidth()&#13;&#10;    ) {&#13;&#10;        Row(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .padding(12.dp),&#13;&#10;            verticalAlignment = Alignment.CenterVertically&#13;&#10;        ) {&#13;&#10;            // Imagen&#13;&#10;            AsyncImage(&#13;&#10;                model = receta.imagen,&#13;&#10;                contentDescription = receta.nombre,&#13;&#10;                modifier = Modifier.size(80.dp),&#13;&#10;                contentScale = ContentScale.Crop&#13;&#10;            )&#13;&#10;            &#13;&#10;            Spacer(modifier = Modifier.width(12.dp))&#13;&#10;            &#13;&#10;            // Información&#13;&#10;            Column(&#13;&#10;                modifier = Modifier.weight(1f)&#13;&#10;            ) {&#13;&#10;                Text(&#13;&#10;                    text = receta.nombre,&#13;&#10;                    style = MaterialTheme.typography.titleMedium,&#13;&#10;                    fontWeight = FontWeight.Bold&#13;&#10;                )&#13;&#10;                &#13;&#10;                if (receta.categoria.isNotBlank()) {&#13;&#10;                    Text(&#13;&#10;                        text = receta.categoria,&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                &#13;&#10;                if (receta.area.isNotBlank()) {&#13;&#10;                    Text(&#13;&#10;                        text = receta.area,&#13;&#10;                        style = MaterialTheme.typography.bodySmall,&#13;&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#13;&#10;                    )&#13;&#10;                }&#13;&#10;                &#13;&#10;                // Indicador de tipo&#13;&#10;                Row(&#13;&#10;                    verticalAlignment = Alignment.CenterVertically,&#13;&#10;                    modifier = Modifier.padding(top = 4.dp)&#13;&#10;                ) {&#13;&#10;                    Icon(&#13;&#10;                        imageVector = Icons.Default.RestaurantMenu,&#13;&#10;                        contentDescription = null,&#13;&#10;                        modifier = Modifier.size(16.dp),&#13;&#10;                        tint = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                    Spacer(modifier = Modifier.width(4.dp))&#13;&#10;                    Text(&#13;&#10;                        text = if (receta.tipo == &quot;meal&quot;) &quot;Comida&quot; else &quot;Bebida&quot;,&#13;&#10;                        style = MaterialTheme.typography.labelSmall,&#13;&#10;                        color = MaterialTheme.colorScheme.primary&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &#13;&#10;            // Botón de favorito&#13;&#10;            IconButton(onClick = onToggleFavorito) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = Icons.Default.Favorite,&#13;&#10;                    contentDescription = &quot;Quitar de favoritos&quot;,&#13;&#10;                    tint = MaterialTheme.colorScheme.error&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Star&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.rememberAsyncImagePainter&#10;import com.rodrigoangeloni.flavorfusion.components.MensajeError&#10;import com.rodrigoangeloni.flavorfusion.components.TarjetaReceta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleComida: (String) -&gt; Unit,&#10;    navegarADetalleBebida: (String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Flavor Fusion&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .fillMaxSize()&#10;                .verticalScroll(rememberScrollState())&#10;        ) {&#10;            // Banner de bienvenida&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(MaterialTheme.colorScheme.primaryContainer)&#10;                    .padding(16.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Text(&#10;                        text = &quot;¿Qué te gustaría preparar hoy?&quot;,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                    Row(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        horizontalArrangement = Arrangement.SpaceEvenly&#10;                    ) {&#10;                        Button(onClick = navegarAComidas) {&#10;                            Icon(Icons.Default.Home, contentDescription = null)&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Comidas&quot;)&#10;                        }&#10;&#10;                        Button(&#10;                            onClick = navegarABebidas,&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = MaterialTheme.colorScheme.secondary&#10;                            )&#10;                        ) {&#10;                            Icon(Icons.Default.Star, contentDescription = null)&#10;                            Spacer(modifier = Modifier.width(8.dp))&#10;                            Text(&quot;Bebidas&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Descripción de la app&#10;            Card(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Column(modifier = Modifier.padding(16.dp)) {&#10;                    Text(&#10;                        text = &quot;¿Qué es Flavor Fusion?&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    Text(&#10;                        &quot;Flavor Fusion es tu asistente culinario que te ayuda a descubrir &quot; +&#10;                                &quot;deliciosas recetas de comidas y bebidas de todo el mundo.&quot;&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Sección de sugerencias&#10;            Text(&#10;                text = &quot;Sugerencias para hoy&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(16.dp)&#10;            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else if (estadoUI.error != null) {&#10;                MensajeError(&#10;                    mensaje = estadoUI.error!!,&#10;                    onReintentar = viewModel::cargarSugerenciasAleatorias&#10;                )&#10;            } else {&#10;                // Sugerencia de comida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaReceta(&#10;                        titulo = &quot;Comida recomendada&quot;,&#10;                        nombre = comida.nombre,&#10;                        categoria = comida.categoria,&#10;                        urlImagen = comida.urlImagen,&#10;                        onClick = { navegarADetalleComida(comida.id) }&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                // Sugerencia de bebida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaReceta(&#10;                        titulo = &quot;Bebida recomendada&quot;,&#10;                        nombre = bebida.nombre,&#10;                        categoria = bebida.categoria,&#10;                        urlImagen = bebida.urlImagen,&#10;                        onClick = { navegarADetalleBebida(bebida.id) }&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.Image&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.rememberScrollState&#13;&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#13;&#10;import androidx.compose.foundation.verticalScroll&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.draw.clip&#13;&#10;import androidx.compose.ui.layout.ContentScale&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import androidx.hilt.navigation.compose.hiltViewModel&#13;&#10;import coil.compose.AsyncImage&#13;&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun PantallaInicio(&#13;&#10;    viewModel: InicioViewModel = hiltViewModel(),&#13;&#10;    navegarAComidas: () -&gt; Unit,&#13;&#10;    navegarABebidas: () -&gt; Unit,&#13;&#10;    navegarAFavoritos: () -&gt; Unit,&#13;&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#13;&#10;) {&#13;&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#13;&#10;&#13;&#10;    Scaffold(&#13;&#10;        topBar = {&#13;&#10;            TopAppBar(&#13;&#10;                title = { Text(&quot;Flavor Fusion&quot;) },&#13;&#10;                actions = {&#13;&#10;                    IconButton(onClick = navegarAFavoritos) {&#13;&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    ) { paddingValues -&gt;&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(paddingValues)&#13;&#10;                .verticalScroll(rememberScrollState())&#13;&#10;                .padding(16.dp)&#13;&#10;        ) {&#13;&#10;            // Título de bienvenida&#13;&#10;            Text(&#13;&#10;                text = &quot;¡Descubre Nuevos Sabores!&quot;,&#13;&#10;                style = MaterialTheme.typography.headlineMedium,&#13;&#10;                fontWeight = FontWeight.Bold,&#13;&#10;                modifier = Modifier.padding(bottom = 24.dp)&#13;&#10;            )&#13;&#10;&#13;&#10;            if (estadoUI.estaCargando) {&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxWidth()&#13;&#10;                        .height(200.dp),&#13;&#10;                    contentAlignment = Alignment.Center&#13;&#10;                ) {&#13;&#10;                    CircularProgressIndicator()&#13;&#10;                }&#13;&#10;            } else {&#13;&#10;                // Comida sugerida&#13;&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#13;&#10;                    TarjetaSugerencia(&#13;&#10;                        titulo = &quot;Comida del Día&quot;,&#13;&#10;                        receta = comida,&#13;&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#13;&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#13;&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#13;&#10;                }&#13;&#10;&#13;&#10;                // Bebida sugerida&#13;&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#13;&#10;                    TarjetaSugerencia(&#13;&#10;                        titulo = &quot;Bebida del Día&quot;,&#13;&#10;                        receta = bebida,&#13;&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#13;&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#13;&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#13;&#10;                    )&#13;&#10;&#13;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#13;&#10;                }&#13;&#10;&#13;&#10;                // Botones de navegación&#13;&#10;                Row(&#13;&#10;                    modifier = Modifier.fillMaxWidth(),&#13;&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#13;&#10;                ) {&#13;&#10;                    // Botón explorar comidas&#13;&#10;                    Card(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .weight(1f)&#13;&#10;                            .clickable { navegarAComidas() },&#13;&#10;                        colors = CardDefaults.cardColors(&#13;&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#13;&#10;                        )&#13;&#10;                    ) {&#13;&#10;                        Column(&#13;&#10;                            modifier = Modifier.padding(16.dp),&#13;&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = Icons.Default.Restaurant,&#13;&#10;                                contentDescription = null,&#13;&#10;                                modifier = Modifier.size(32.dp),&#13;&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;                            )&#13;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                            Text(&#13;&#10;                                text = &quot;Explorar Comidas&quot;,&#13;&#10;                                style = MaterialTheme.typography.titleSmall,&#13;&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;&#13;&#10;                    // Botón explorar bebidas&#13;&#10;                    Card(&#13;&#10;                        modifier = Modifier&#13;&#10;                            .weight(1f)&#13;&#10;                            .clickable { navegarABebidas() },&#13;&#10;                        colors = CardDefaults.cardColors(&#13;&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#13;&#10;                        )&#13;&#10;                    ) {&#13;&#10;                        Column(&#13;&#10;                            modifier = Modifier.padding(16.dp),&#13;&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;                        ) {&#13;&#10;                            Icon(&#13;&#10;                                imageVector = Icons.Default.LocalBar,&#13;&#10;                                contentDescription = null,&#13;&#10;                                modifier = Modifier.size(32.dp),&#13;&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#13;&#10;                            )&#13;&#10;                            Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                            Text(&#13;&#10;                                text = &quot;Explorar Bebidas&quot;,&#13;&#10;                                style = MaterialTheme.typography.titleSmall,&#13;&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#13;&#10;                            )&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // Mostrar error si existe&#13;&#10;            estadoUI.error?.let { error -&gt;&#13;&#10;                Spacer(modifier = Modifier.height(16.dp))&#13;&#10;                Card(&#13;&#10;                    colors = CardDefaults.cardColors(&#13;&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#13;&#10;                    )&#13;&#10;                ) {&#13;&#10;                    Column(&#13;&#10;                        modifier = Modifier.padding(16.dp)&#13;&#10;                    ) {&#13;&#10;                        Text(&#13;&#10;                            text = &quot;Error&quot;,&#13;&#10;                            style = MaterialTheme.typography.titleMedium,&#13;&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#13;&#10;                            fontWeight = FontWeight.Bold&#13;&#10;                        )&#13;&#10;                        Text(&#13;&#10;                            text = error,&#13;&#10;                            style = MaterialTheme.typography.bodyMedium,&#13;&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#13;&#10;                        )&#13;&#10;                        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;                        Button(&#13;&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#13;&#10;                        ) {&#13;&#10;                            Text(&quot;Reintentar&quot;)&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun TarjetaSugerencia(&#13;&#10;    titulo: String,&#13;&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#13;&#10;    esFavorito: Boolean,&#13;&#10;    onRecetaClick: () -&gt; Unit,&#13;&#10;    onFavoritoClick: () -&gt; Unit&#13;&#10;) {&#13;&#10;    Column {&#13;&#10;        Text(&#13;&#10;            text = titulo,&#13;&#10;            style = MaterialTheme.typography.titleLarge,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            modifier = Modifier.padding(bottom = 8.dp)&#13;&#10;        )&#13;&#10;&#13;&#10;        Card(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxWidth()&#13;&#10;                .clickable { onRecetaClick() }&#13;&#10;        ) {&#13;&#10;            Column {&#13;&#10;                Box {&#13;&#10;                    AsyncImage(&#13;&#10;                        model = receta.imagen,&#13;&#10;                        contentDescription = receta.nombre,&#13;&#10;                        modifier = Modifier&#13;&#10;                            .fillMaxWidth()&#13;&#10;                            .height(200.dp),&#13;&#10;                        contentScale = ContentScale.Crop&#13;&#10;                    )&#13;&#10;&#13;&#10;                    // Botón de favorito flotante&#13;&#10;                    IconButton(&#13;&#10;                        onClick = onFavoritoClick,&#13;&#10;                        modifier = Modifier&#13;&#10;                            .align(Alignment.TopEnd)&#13;&#10;                            .padding(8.dp)&#13;&#10;                            .background(&#13;&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#13;&#10;                                RoundedCornerShape(50)&#13;&#10;                            )&#13;&#10;                    ) {&#13;&#10;                        Icon(&#13;&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#13;&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#13;&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                Column(&#13;&#10;                    modifier = Modifier.padding(16.dp)&#13;&#10;                ) {&#13;&#10;                    Text(&#13;&#10;                        text = receta.nombre,&#13;&#10;                        style = MaterialTheme.typography.titleMedium,&#13;&#10;                        fontWeight = FontWeight.Bold&#13;&#10;                    )&#13;&#10;&#13;&#10;                    if (receta.categoria.isNotBlank()) {&#13;&#10;                        Text(&#13;&#10;                            text = receta.categoria,&#13;&#10;                            style = MaterialTheme.typography.bodyMedium,&#13;&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#13;&#10;                            modifier = Modifier.padding(top = 4.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;&#13;&#10;                    if (receta.area.isNotBlank()) {&#13;&#10;                        Text(&#13;&#10;                            text = receta.area,&#13;&#10;                            style = MaterialTheme.typography.bodySmall,&#13;&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#13;&#10;                            modifier = Modifier.padding(top = 2.dp)&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/Navegacion.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/Navegacion.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.util&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.rodrigoangeloni.flavorfusion.screens.*&#10;&#10;@Composable&#10;fun AppNavegacion() {&#10;    val navController = rememberNavController()&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;inicio&quot;&#10;    ) {&#10;        // Pantalla de inicio&#10;        composable(&quot;inicio&quot;) {&#10;            PantallaInicio(&#10;                navegarAComidas = { navController.navigate(&quot;explorar_comidas&quot;) },&#10;                navegarABebidas = { navController.navigate(&quot;explorar_bebidas&quot;) },&#10;                navegarAFavoritos = { navController.navigate(&quot;favoritos&quot;) },&#10;                navegarADetalleComida = { id -&gt; navController.navigate(&quot;detalle_receta/$id/meal&quot;) },&#10;                navegarADetalleBebida = { id -&gt; navController.navigate(&quot;detalle_receta/$id/cocktail&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar comidas&#10;        composable(&quot;explorar_comidas&quot;) {&#10;            PantallaExplorarComidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id -&gt; navController.navigate(&quot;detalle_receta/$id/meal&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar bebidas&#10;        composable(&quot;explorar_bebidas&quot;) {&#10;            PantallaExplorarBebidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id -&gt; navController.navigate(&quot;detalle_receta/$id/cocktail&quot;) }&#10;            )&#10;        }&#10;&#10;        // Detalle de receta&#10;        composable(&#10;            route = &quot;detalle_receta/{recipeId}/{recipeType}&quot;,&#10;            arguments = listOf(&#10;                navArgument(&quot;recipeId&quot;) { type = NavType.StringType },&#10;                navArgument(&quot;recipeType&quot;) { type = NavType.StringType }&#10;            )&#10;        ) { backStackEntry -&gt;&#10;            val recipeId = backStackEntry.arguments?.getString(&quot;recipeId&quot;) ?: &quot;&quot;&#10;            val recipeType = backStackEntry.arguments?.getString(&quot;recipeType&quot;) ?: &quot;meal&quot;&#10;&#10;            PantallaDetalleReceta(&#10;                recipeId = recipeId,&#10;                recipeType = recipeType,&#10;                onNavigateUp = { navController.navigateUp() }&#10;            )&#10;        }&#10;&#10;        // Favoritos&#10;        composable(&quot;favoritos&quot;) {&#10;            PantallaFavoritos(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onMealClick = { id -&gt; navController.navigate(&quot;detalle_receta/$id/meal&quot;) },&#10;                onCocktailClick = { id -&gt; navController.navigate(&quot;detalle_receta/$id/cocktail&quot;) }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.util&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import androidx.navigation.NavType&#10;import com.rodrigoangeloni.flavorfusion.screens.*&#10;&#10;@Composable&#10;fun NavegacionApp(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;inicio&quot;&#10;    ) {&#10;        // Pantalla de inicio&#10;        composable(&quot;inicio&quot;) {&#10;            PantallaInicio(&#10;                navegarAComidas = { navController.navigate(&quot;explorar_comidas&quot;) },&#10;                navegarABebidas = { navController.navigate(&quot;explorar_bebidas&quot;) },&#10;                navegarAFavoritos = { navController.navigate(&quot;favoritos&quot;) },&#10;                navegarADetalleReceta = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar comidas&#10;        composable(&quot;explorar_comidas&quot;) {&#10;            PantallaExplorarComidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar bebidas&#10;        composable(&quot;explorar_bebidas&quot;) {&#10;            PantallaExplorarBebidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Pantalla de favoritos&#10;        composable(&quot;favoritos&quot;) {&#10;            PantallaFavoritos(&#10;                onRecetaClick = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Detalle de receta&#10;        composable(&#10;            route = &quot;detalle_receta/{recipeId}/{recipeType}&quot;,&#10;            arguments = listOf(&#10;                navArgument(&quot;recipeId&quot;) { type = NavType.StringType },&#10;                navArgument(&quot;recipeType&quot;) { type = NavType.StringType }&#10;            )&#10;        ) { backStackEntry -&gt;&#10;            val recipeId = backStackEntry.arguments?.getString(&quot;recipeId&quot;) ?: &quot;&quot;&#10;            val recipeType = backStackEntry.arguments?.getString(&quot;recipeType&quot;) ?: &quot;&quot;&#10;            &#10;            PantallaDetalleReceta(&#10;                recipeId = recipeId,&#10;                recipeType = recipeType,&#10;                onNavigateUp = { navController.navigateUp() }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/viewmodels/InicioViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/viewmodels/InicioViewModel.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.viewmodels&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.repository.RecetasRepositorio&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.flow.*&#10;import kotlinx.coroutines.launch&#10;import javax.inject.Inject&#10;&#10;// Estado UI para la pantalla de inicio&#10;data class InicioEstadoUI(&#10;    val comidaSugerida: Receta.Comida? = null,&#10;    val bebidaSugerida: Receta.Bebida? = null,&#10;    val resultadosBusquedaComidas: List&lt;Receta.Comida&gt; = emptyList(),&#10;    val resultadosBusquedaBebidas: List&lt;Receta.Bebida&gt; = emptyList(),&#10;    val detalleComida: Receta.Comida? = null,&#10;    val detalleBebida: Receta.Bebida? = null,&#10;    val estaCargando: Boolean = false,&#10;    val estaBuscando: Boolean = false,&#10;    val error: String? = null&#10;)&#10;&#10;@HiltViewModel&#10;class InicioViewModel @Inject constructor(&#10;    private val repositorio: RecetasRepositorio&#10;) : ViewModel() {&#10;&#10;    // Estado de la UI&#10;    private val _estadoUI = MutableStateFlow(InicioEstadoUI(estaCargando = true))&#10;    val estadoUI: StateFlow&lt;InicioEstadoUI&gt; = _estadoUI.asStateFlow()&#10;&#10;    init {&#10;        cargarSugerenciasAleatorias()&#10;    }&#10;&#10;    fun cargarSugerenciasAleatorias() {&#10;        viewModelScope.launch {&#10;            _estadoUI.update { it.copy(estaCargando = true) }&#10;&#10;            try {&#10;                // Cargar comida aleatoria&#10;                repositorio.obtenerComidaAleatoria()&#10;                    .collect { comida -&gt;&#10;                        _estadoUI.update { it.copy(comidaSugerida = comida) }&#10;                    }&#10;&#10;                // Cargar bebida aleatoria&#10;                repositorio.obtenerBebidaAleatoria()&#10;                    .collect { bebida -&gt;&#10;                        _estadoUI.update {&#10;                            it.copy(&#10;                                bebidaSugerida = bebida,&#10;                                estaCargando = false&#10;                            )&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        error = &quot;Error al cargar sugerencias: ${e.message}&quot;,&#10;                        estaCargando = false&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun marcarComidaComoFavorita(comida: Receta.Comida) {&#10;        viewModelScope.launch {&#10;            try {&#10;                repositorio.toggleComidaFavorita(comida)&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        comidaSugerida = if (it.comidaSugerida?.id == comida.id) {&#10;                            comida.copy(esFavorito = !comida.esFavorito)&#10;                        } else it.comidaSugerida,&#10;                        detalleComida = if (it.detalleComida?.id == comida.id) {&#10;                            comida.copy(esFavorito = !comida.esFavorito)&#10;                        } else it.detalleComida&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(error = &quot;Error al actualizar favoritos: ${e.message}&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun marcarBebidaComoFavorita(bebida: Receta.Bebida) {&#10;        viewModelScope.launch {&#10;            try {&#10;                repositorio.toggleBebidaFavorita(bebida)&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        bebidaSugerida = if (it.bebidaSugerida?.id == bebida.id) {&#10;                            bebida.copy(esFavorito = !bebida.esFavorito)&#10;                        } else it.bebidaSugerida,&#10;                        detalleBebida = if (it.detalleBebida?.id == bebida.id) {&#10;                            bebida.copy(esFavorito = !bebida.esFavorito)&#10;                        } else it.detalleBebida&#10;                    )&#10;                }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(error = &quot;Error al actualizar favoritos: ${e.message}&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun buscarComidas(consulta: String) {&#10;        viewModelScope.launch {&#10;            _estadoUI.update { it.copy(estaBuscando = true) }&#10;&#10;            try {&#10;                repositorio.buscarComidas(consulta)&#10;                    .collect { resultados -&gt;&#10;                        _estadoUI.update {&#10;                            it.copy(&#10;                                resultadosBusquedaComidas = resultados,&#10;                                estaBuscando = false&#10;                            )&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        error = &quot;Error al buscar comidas: ${e.message}&quot;,&#10;                        estaBuscando = false&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun buscarBebidas(consulta: String) {&#10;        viewModelScope.launch {&#10;            _estadoUI.update { it.copy(estaBuscando = true) }&#10;&#10;            try {&#10;                repositorio.buscarBebidas(consulta)&#10;                    .collect { resultados -&gt;&#10;                        _estadoUI.update {&#10;                            it.copy(&#10;                                resultadosBusquedaBebidas = resultados,&#10;                                estaBuscando = false&#10;                            )&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        error = &quot;Error al buscar bebidas: ${e.message}&quot;,&#10;                        estaBuscando = false&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun limpiarResultadosBusqueda() {&#10;        _estadoUI.update {&#10;            it.copy(&#10;                resultadosBusquedaComidas = emptyList(),&#10;                resultadosBusquedaBebidas = emptyList()&#10;            )&#10;        }&#10;    }&#10;&#10;    fun limpiarError() {&#10;        _estadoUI.update { it.copy(error = null) }&#10;    }&#10;&#10;    /**&#10;     * Carga los detalles de una comida específica por su ID&#10;     */&#10;    fun cargarDetalleComida(id: String) {&#10;        viewModelScope.launch {&#10;            _estadoUI.update { it.copy(estaCargando = true, error = null) }&#10;&#10;            try {&#10;                repositorio.obtenerDetalleComida(id)&#10;                    .collect { comida -&gt;&#10;                        _estadoUI.update {&#10;                            it.copy(&#10;                                detalleComida = comida,&#10;                                estaCargando = false&#10;                            )&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        error = &quot;Error al cargar detalles de la comida: ${e.message}&quot;,&#10;                        estaCargando = false&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Carga los detalles de una bebida específica por su ID&#10;     */&#10;    fun cargarDetalleBebida(id: String) {&#10;        viewModelScope.launch {&#10;            _estadoUI.update { it.copy(estaCargando = true, error = null) }&#10;&#10;            try {&#10;                repositorio.obtenerDetalleBebida(id)&#10;                    .collect { bebida -&gt;&#10;                        _estadoUI.update {&#10;                            it.copy(&#10;                                detalleBebida = bebida,&#10;                                estaCargando = false&#10;                            )&#10;                        }&#10;                    }&#10;            } catch (e: Exception) {&#10;                _estadoUI.update {&#10;                    it.copy(&#10;                        error = &quot;Error al cargar detalles de la bebida: ${e.message}&quot;,&#10;                        estaCargando = false&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.viewmodels&#13;&#10;&#13;&#10;import androidx.lifecycle.ViewModel&#13;&#10;import androidx.lifecycle.viewModelScope&#13;&#10;import com.rodrigoangeloni.flavorfusion.model.*&#13;&#10;import com.rodrigoangeloni.flavorfusion.repository.RecetasRepositorio&#13;&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#13;&#10;import kotlinx.coroutines.flow.*&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;import javax.inject.Inject&#13;&#10;&#13;&#10;// Estado UI para la aplicación&#13;&#10;data class InicioEstadoUI(&#13;&#10;    val comidaSugerida: Receta? = null,&#13;&#10;    val bebidaSugerida: Receta? = null,&#13;&#10;    val resultadosBusquedaComidas: List&lt;Receta&gt; = emptyList(),&#13;&#10;    val resultadosBusquedaBebidas: List&lt;Receta&gt; = emptyList(),&#13;&#10;    val detalleComida: Receta? = null,&#13;&#10;    val detalleBebida: Receta? = null,&#13;&#10;    val estaCargando: Boolean = false,&#13;&#10;    val estaBuscando: Boolean = false,&#13;&#10;    val error: String? = null,&#13;&#10;    val favoritosIds: Set&lt;String&gt; = emptySet()&#13;&#10;)&#13;&#10;&#13;&#10;@HiltViewModel&#13;&#10;class InicioViewModel @Inject constructor(&#13;&#10;    private val repositorio: RecetasRepositorio&#13;&#10;) : ViewModel() {&#13;&#10;&#13;&#10;    // Estado de la UI&#13;&#10;    private val _estadoUI = MutableStateFlow(InicioEstadoUI(estaCargando = true))&#13;&#10;    val estadoUI: StateFlow&lt;InicioEstadoUI&gt; = _estadoUI.asStateFlow()&#13;&#10;&#13;&#10;    // Flow de favoritos&#13;&#10;    val favoritos: StateFlow&lt;List&lt;Receta&gt;&gt; = repositorio.obtenerFavoritos()&#13;&#10;        .stateIn(&#13;&#10;            scope = viewModelScope,&#13;&#10;            started = SharingStarted.WhileSubscribed(5000),&#13;&#10;            initialValue = emptyList()&#13;&#10;        )&#13;&#10;&#13;&#10;    init {&#13;&#10;        cargarSugerenciasAleatorias()&#13;&#10;        observarFavoritos()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun observarFavoritos() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            favoritos.collect { listaFavoritos -&gt;&#13;&#10;                val favoritosIds = listaFavoritos.map { it.id }.toSet()&#13;&#10;                _estadoUI.update { it.copy(favoritosIds = favoritosIds) }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun cargarSugerenciasAleatorias() {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _estadoUI.update { it.copy(estaCargando = true, error = null) }&#13;&#10;&#13;&#10;            try {&#13;&#10;                // Cargar comida aleatoria&#13;&#10;                val comidaResponse = repositorio.obtenerComidaAleatoria()&#13;&#10;                val comidaSugerida = comidaResponse?.meals?.firstOrNull()?.toReceta()&#13;&#10;&#13;&#10;                // Cargar bebida aleatoria&#13;&#10;                val bebidaResponse = repositorio.obtenerBebidaAleatoria()&#13;&#10;                val bebidaSugerida = bebidaResponse?.drinks?.firstOrNull()?.toReceta()&#13;&#10;&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        comidaSugerida = comidaSugerida,&#13;&#10;                        bebidaSugerida = bebidaSugerida,&#13;&#10;                        estaCargando = false&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        estaCargando = false,&#13;&#10;                        error = &quot;Error al cargar sugerencias: ${e.message}&quot;&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun buscarComidas(query: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _estadoUI.update { it.copy(estaBuscando = true, error = null) }&#13;&#10;&#13;&#10;            try {&#13;&#10;                val response = repositorio.buscarComidas(query)&#13;&#10;                val recetas = response?.meals?.map { it.toReceta() } ?: emptyList()&#13;&#10;&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        resultadosBusquedaComidas = recetas,&#13;&#10;                        estaBuscando = false&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        estaBuscando = false,&#13;&#10;                        error = &quot;Error en búsqueda: ${e.message}&quot;&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun buscarBebidas(query: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _estadoUI.update { it.copy(estaBuscando = true, error = null) }&#13;&#10;&#13;&#10;            try {&#13;&#10;                val response = repositorio.buscarBebidas(query)&#13;&#10;                val recetas = response?.drinks?.map { it.toReceta() } ?: emptyList()&#13;&#10;&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        resultadosBusquedaBebidas = recetas,&#13;&#10;                        estaBuscando = false&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        estaBuscando = false,&#13;&#10;                        error = &quot;Error en búsqueda: ${e.message}&quot;&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun cargarDetalleComida(id: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _estadoUI.update { it.copy(estaCargando = true, error = null) }&#13;&#10;&#13;&#10;            try {&#13;&#10;                val response = repositorio.obtenerDetalleComida(id)&#13;&#10;                val receta = response?.meals?.firstOrNull()?.toReceta()&#13;&#10;&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        detalleComida = receta,&#13;&#10;                        estaCargando = false&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        estaCargando = false,&#13;&#10;                        error = &quot;Error al cargar detalle: ${e.message}&quot;&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun cargarDetalleBebida(id: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            _estadoUI.update { it.copy(estaCargando = true, error = null) }&#13;&#10;&#13;&#10;            try {&#13;&#10;                val response = repositorio.obtenerDetalleBebida(id)&#13;&#10;                val receta = response?.drinks?.firstOrNull()?.toReceta()&#13;&#10;&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        detalleBebida = receta,&#13;&#10;                        estaCargando = false&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(&#13;&#10;                        estaCargando = false,&#13;&#10;                        error = &quot;Error al cargar detalle: ${e.message}&quot;&#13;&#10;                    ) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Funciones de favoritos&#13;&#10;    suspend fun esFavorito(id: String): Boolean {&#13;&#10;        return repositorio.esFavorito(id)&#13;&#10;    }&#13;&#10;&#13;&#10;    fun alternarFavorito(receta: Receta) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                repositorio.alternarFavorito(receta)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(error = &quot;Error al guardar favorito: ${e.message}&quot;) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun agregarFavorito(receta: Receta) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                repositorio.agregarFavorito(receta)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(error = &quot;Error al agregar favorito: ${e.message}&quot;) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun eliminarFavorito(id: String) {&#13;&#10;        viewModelScope.launch {&#13;&#10;            try {&#13;&#10;                repositorio.eliminarFavorito(id)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                _estadoUI.update { &#13;&#10;                    it.copy(error = &quot;Error al eliminar favorito: ${e.message}&quot;) &#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun limpiarError() {&#13;&#10;        _estadoUI.update { it.copy(error = null) }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun limpiarResultadosBusqueda() {&#13;&#10;        _estadoUI.update { &#13;&#10;            it.copy(&#13;&#10;                resultadosBusquedaComidas = emptyList(),&#13;&#10;                resultadosBusquedaBebidas = emptyList()&#13;&#10;            ) &#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/doc/manual-de-uso.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/doc/manual-de-uso.md" />
              <option name="originalContent" value="# FlavorFusion2 - Manual de Uso&#10;&#10;##  Guía Completa para Usuarios&#10;&#10;###  Primeros Pasos&#10;&#10;#### Instalación&#10;1. Descarga la aplicación desde tu tienda de aplicaciones&#10;2. Instala en tu dispositivo Android&#10;3. Abre la aplicación y ¡comienza a explorar!&#10;&#10;#### Primera Apertura&#10;- La aplicación cargará automáticamente sugerencias del día&#10;- Verás una comida y bebida destacada en la pantalla principal&#10;- La navegación principal está disponible en la parte inferior&#10;&#10;---&#10;&#10;##  Pantalla de Inicio&#10;&#10;### ¿Qué encontrarás?&#10;- **️ Comida Destacada**: Una receta de comida aleatoria del día&#10;- ** Bebida Destacada**: Una bebida especial seleccionada&#10;- ** Navegación Rápida**: Acceso directo a todas las secciones&#10;&#10;### Acciones Disponibles&#10;- **Tocar una receta**: Ver detalles completos&#10;- **Navegar**: Usar los botones inferiores para cambiar de sección&#10;- **Actualizar**: Deslizar hacia abajo para nuevas sugerencias&#10;&#10;---&#10;&#10;##  Explorar Recetas&#10;&#10;### ️ Sección de Comidas&#10;&#10;#### Búsqueda de Recetas&#10;1. **Escribir en el buscador**:&#10;   - Toca el campo de búsqueda&#10;   - Escribe el nombre de la comida que buscas&#10;   - Ejemplo: &quot;pasta&quot;, &quot;chicken&quot;, &quot;tacos&quot;&#10;&#10;2. **Ejecutar la búsqueda**:&#10;   - **Opción 1**: Presiona el botón de búsqueda ()&#10;   - **Opción 2**: Presiona Enter en tu teclado&#10;   - **Opción 3**: La búsqueda se ejecuta automáticamente&#10;&#10;3. **Ver resultados**:&#10;   - Los resultados aparecen como tarjetas visuales&#10;   - Cada tarjeta muestra imagen, nombre y categoría&#10;   - Toca cualquier receta para ver detalles completos&#10;&#10;#### Limpiar Búsqueda&#10;- **Botón X**: Toca la X para borrar el texto&#10;- **Borrar manualmente**: Elimina el texto para volver a la vista principal&#10;&#10;###  Sección de Bebidas&#10;&#10;#### Funcionalidad Idéntica&#10;- Misma interfaz que la sección de comidas&#10;- Busca por nombre: &quot;mojito&quot;, &quot;coffee&quot;, &quot;smoothie&quot;&#10;- Resultados específicos para bebidas&#10;&#10;---&#10;&#10;##  Detalles de Recetas&#10;&#10;### Información Completa&#10;Al tocar cualquier receta verás:&#10;&#10;- ** Imagen Principal**: Foto de alta calidad del plato/bebida&#10;- ** Información Básica**:&#10;  - Nombre de la receta&#10;  - Categoría (Desayuno, Cena, Cóctel, etc.)&#10;  - País de origen&#10;  - Tipo de vaso (para bebidas)&#10;&#10;- ** Ingredientes**:&#10;  - Lista completa con cantidades exactas&#10;  - Ingredientes organizados y fáciles de leer&#10;&#10;- **‍ Instrucciones**:&#10;  - Pasos detallados de preparación&#10;  - Proceso completo de cocina/preparación&#10;&#10;### Navegación en Detalles&#10;- **← Flecha atrás**: Regresar a la lista anterior&#10;- **❤️ Favoritos**: Marcar o desmarcar como favorito&#10;&#10;---&#10;&#10;## ❤️ Sistema de Favoritos&#10;&#10;### Marcar como Favorito&#10;1. **En detalles de receta**: Toca el icono de corazón&#10;2. **Estados visuales**:&#10;   - ❤️ Rojo = Es favorito&#10;   -  Vacío = No es favorito&#10;3. **Guardado automático**: Los favoritos se guardan instantáneamente&#10;&#10;### Ver Favoritos&#10;1. Navega a la sección &quot;Favoritos&quot; (icono ❤️)&#10;2. Ve todas tus recetas guardadas&#10;3. Acceso rápido a tus recetas preferidas&#10;4. Disponible sin conexión a internet&#10;&#10;---&#10;&#10;## ️ Estados de la Aplicación&#10;&#10;### Indicadores Visuales&#10;&#10;####  Cargando&#10;- **Spinner circular**: Indica que se están cargando datos&#10;- **Aparece cuando**:&#10;  - Abres la aplicación por primera vez&#10;  - Realizas una búsqueda&#10;  - Cargas detalles de receta&#10;&#10;#### ❌ Sin Resultados&#10;- **Mensaje informativo**: &quot;No se encontraron resultados para 'tu búsqueda'&quot;&#10;- **Aparece cuando**: Tu búsqueda no encuentra recetas coincidentes&#10;&#10;#### ⚠️ Error de Conexión&#10;- **Mensaje de error**: Descripción del problema&#10;- **Botón &quot;Reintentar&quot;**: Para volver a intentar la operación&#10;- **Aparece cuando**: Hay problemas de conexión a internet&#10;&#10;---&#10;&#10;##  Tips y Trucos&#10;&#10;### Búsquedas Efectivas&#10;- **Usa palabras clave simples**: &quot;chicken&quot; mejor que &quot;pollo con arroz&quot;&#10;- **Prueba en inglés**: Las APIs funcionan mejor en inglés&#10;- **Sé específico**: &quot;pasta&quot; dará mejores resultados que &quot;comida italiana&quot;&#10;&#10;### Gestión de Favoritos&#10;- **Organiza por tipo**: Usa favoritos para categorizar mentalmente&#10;- **Acceso offline**: Los favoritos funcionan sin internet&#10;- **Limpieza periódica**: Elimina favoritos que ya no uses&#10;&#10;### Navegación Rápida&#10;- **Barra inferior**: Siempre visible para cambio rápido de sección&#10;- **Botón atrás**: Consistente en toda la aplicación&#10;- **Gestos**: Deslizar funciona en algunas secciones&#10;&#10;---&#10;&#10;##  Solución de Problemas&#10;&#10;### La búsqueda no funciona&#10;1. **Verifica tu conexión**: Necesitas internet para buscar&#10;2. **Revisa la ortografía**: Errores tipográficos afectan resultados&#10;3. **Prueba términos diferentes**: Usa sinónimos o palabras más simples&#10;4. **Reinicia la app**: Cierra y abre nuevamente&#10;&#10;### Los favoritos no se guardan&#10;1. **Espera a la confirmación**: El corazón debe cambiar de color&#10;2. **Verifica espacio**: Asegúrate de tener espacio en el dispositivo&#10;3. **Reinicia la aplicación**: Puede resolver problemas temporales&#10;&#10;### La aplicación está lenta&#10;1. **Cierra otras apps**: Libera memoria del dispositivo&#10;2. **Verifica conexión**: Conexión lenta afecta la carga&#10;3. **Reinicia el dispositivo**: Solución para problemas generales&#10;&#10;---&#10;&#10;##  Requisitos del Sistema&#10;&#10;- **Android**: Versión 7.0 (API 24) o superior&#10;- **Memoria**: Mínimo 2GB RAM recomendado&#10;- **Almacenamiento**: 100MB espacio libre&#10;- **Internet**: Conexión requerida para búsquedas y nuevas recetas&#10;- **Permisos**: Acceso a internet únicamente&#10;&#10;---&#10;&#10;##  Soporte&#10;&#10;### Contacto&#10;- **Desarrollador**: [Tu información de contacto]&#10;- **Email**: [tu-email@ejemplo.com]&#10;- **GitHub**: [tu-repositorio]&#10;&#10;### Reportar Problemas&#10;1. Describe el problema detalladamente&#10;2. Incluye capturas de pantalla si es posible&#10;3. Menciona tu versión de Android&#10;4. Especifica los pasos para reproducir el error&#10;&#10;¡Disfruta explorando el mundo de las recetas con FlavorFusion2! ️✨&#10;" />
              <option name="updatedContent" value="# FlavorFusion2 - Manual de Uso&#13;&#10;&#13;&#10;##  Guía Completa para Usuarios&#13;&#10;&#13;&#10;###  Primeros Pasos&#13;&#10;&#13;&#10;#### Instalación&#13;&#10;1. Descarga la aplicación desde tu tienda de aplicaciones&#13;&#10;2. Instala en tu dispositivo Android&#13;&#10;3. Abre la aplicación y ¡comienza a explorar!&#13;&#10;&#13;&#10;#### Primera Apertura&#13;&#10;- La aplicación cargará automáticamente sugerencias del día&#13;&#10;- Verás una comida y bebida destacada en la pantalla principal&#13;&#10;- La navegación principal está disponible en la parte inferior&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  Pantalla de Inicio&#13;&#10;&#13;&#10;### ¿Qué encontrarás?&#13;&#10;- **️ Comida Destacada**: Una receta de comida aleatoria del día&#13;&#10;- ** Bebida Destacada**: Una bebida especial seleccionada&#13;&#10;- ** Navegación Rápida**: Acceso directo a todas las secciones&#13;&#10;&#13;&#10;### Acciones Disponibles&#13;&#10;- **Tocar una receta**: Ver detalles completos&#13;&#10;- **❤️ Marcar favorito**: Toca el corazón para guardar la receta&#13;&#10;- **Navegar**: Usar los botones inferiores para cambiar de sección&#13;&#10;- **Actualizar**: Deslizar hacia abajo para nuevas sugerencias&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  Explorar Recetas&#13;&#10;&#13;&#10;### ️ Sección de Comidas&#13;&#10;&#13;&#10;#### Búsqueda de Recetas&#13;&#10;1. **Escribir en el buscador**:&#13;&#10;   - Toca el campo de búsqueda&#13;&#10;   - Escribe el nombre de la comida que buscas&#13;&#10;   - Ejemplo: &quot;pasta&quot;, &quot;chicken&quot;, &quot;tacos&quot;&#13;&#10;&#13;&#10;2. **Ejecutar la búsqueda**:&#13;&#10;   - **Opción 1**: Presiona el botón de búsqueda ()&#13;&#10;   - **Opción 2**: Presiona Enter en tu teclado&#13;&#10;   - **Opción 3**: La búsqueda se ejecuta automáticamente&#13;&#10;&#13;&#10;3. **Ver resultados**:&#13;&#10;   - Los resultados aparecen como tarjetas visuales&#13;&#10;   - Cada tarjeta muestra imagen, nombre y categoría&#13;&#10;   - **❤️ Botón favorito** en cada tarjeta&#13;&#10;   - Toca cualquier receta para ver detalles completos&#13;&#10;&#13;&#10;#### Estados de la Búsqueda&#13;&#10;- ** Cargando**: Aparece un spinner mientras busca&#13;&#10;- **✅ Resultados**: Lista de recetas encontradas&#13;&#10;- ** Sin resultados**: Mensaje cuando no hay coincidencias&#13;&#10;- **⚠️ Error**: Problema de conexión con opción de reintentar&#13;&#10;&#13;&#10;###  Sección de Bebidas&#13;&#10;&#13;&#10;#### Funcionalidad Idéntica&#13;&#10;- Misma interfaz y funciones que la sección de comidas&#13;&#10;- Especializada en bebidas alcohólicas y no alcohólicas&#13;&#10;- Información específica: tipo de vaso, método de preparación&#13;&#10;- **❤️ Sistema de favoritos** completamente integrado&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  Detalles de Recetas&#13;&#10;&#13;&#10;### Información Completa&#13;&#10;Cuando tocas cualquier receta, verás:&#13;&#10;&#13;&#10;#### ️ Encabezado&#13;&#10;- **Imagen en alta calidad** de la receta&#13;&#10;- **Botón ❤️ de favorito** (rojo si es favorito, gris si no)&#13;&#10;- **Botón de regreso** (←) para volver&#13;&#10;&#13;&#10;####  Información Básica&#13;&#10;- **Nombre completo** de la receta&#13;&#10;- **Categoría**: Tipo de comida o bebida&#13;&#10;- **Origen**: País o región (para comidas)&#13;&#10;- **Tipo de vaso**: Para bebidas&#13;&#10;&#13;&#10;####  Ingredientes&#13;&#10;- **Lista completa** de ingredientes necesarios&#13;&#10;- **Cantidades exactas** para cada ingrediente&#13;&#10;- **Formato claro** y fácil de leer&#13;&#10;&#13;&#10;#### ‍ Instrucciones&#13;&#10;- **Pasos detallados** de preparación&#13;&#10;- **Texto completo** con todas las indicaciones&#13;&#10;- **Formato legible** para seguir mientras cocinas&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;## ❤️ Sistema de Favoritos ⭐ **¡NUEVA FUNCIONALIDAD!**&#13;&#10;&#13;&#10;###  ¿Qué son los Favoritos?&#13;&#10;Los favoritos te permiten **guardar recetas que te gustan** para acceder a ellas rápidamente, **incluso sin conexión a internet**.&#13;&#10;&#13;&#10;###  ¿Dónde Encontrar el Botón de Favorito?&#13;&#10;El botón ❤️ está disponible en:&#13;&#10;- ✅ **Pantalla de inicio** (en las recetas sugeridas)&#13;&#10;- ✅ **Resultados de búsqueda** (en cada tarjeta de receta)&#13;&#10;- ✅ **Pantalla de detalles** (en la parte superior)&#13;&#10;- ✅ **Pantalla de favoritos** (para eliminar)&#13;&#10;&#13;&#10;###  Cómo Usar los Favoritos&#13;&#10;&#13;&#10;#### **Agregar a Favoritos**&#13;&#10;1.  **Encuentra una receta** que te guste&#13;&#10;2.  **Toca el corazón ❤️** en cualquier ubicación&#13;&#10;3. ✨ **El corazón se pone rojo** indicando que se guardó&#13;&#10;4.  **Se guarda automáticamente** en tu dispositivo&#13;&#10;&#13;&#10;#### **Ver tus Favoritos**&#13;&#10;1.  **Toca el ícono &quot;Favoritos&quot;** en la navegación inferior&#13;&#10;2.  **Ve la lista completa** de recetas guardadas&#13;&#10;3. ️ **Cada favorito muestra**: imagen, nombre, categoría, tipo&#13;&#10;4.  **Toca cualquier receta** para ver detalles completos&#13;&#10;&#13;&#10;#### **Eliminar de Favoritos**&#13;&#10;**Opción 1 - Desde cualquier pantalla:**&#13;&#10;1.  **Toca el corazón rojo ❤️** en la receta&#13;&#10;2.  **Se pone gris** indicando que se eliminó&#13;&#10;&#13;&#10;**Opción 2 - Desde pantalla de favoritos:**&#13;&#10;1.  **Ve a la sección Favoritos**&#13;&#10;2.  **Toca el corazón rojo ❤️** junto a la receta&#13;&#10;3. ✅ **Se elimina de la lista** automáticamente&#13;&#10;&#13;&#10;###  Características Especiales de Favoritos&#13;&#10;&#13;&#10;####  **Acceso Offline**&#13;&#10;- ✅ **Funciona sin internet**: Ve tus favoritos en cualquier momento&#13;&#10;- ✅ **Datos guardados localmente**: En la memoria de tu dispositivo&#13;&#10;- ✅ **Imágenes disponibles**: Se guardan para uso offline&#13;&#10;&#13;&#10;####  **Sincronización en Tiempo Real**&#13;&#10;- ✅ **Actualización instantánea**: Cambios se ven inmediatamente&#13;&#10;- ✅ **Estado consistente**: El corazón siempre refleja el estado real&#13;&#10;- ✅ **Sincronización entre pantallas**: Cambios visibles en toda la app&#13;&#10;&#13;&#10;####  **Gestión Inteligente**&#13;&#10;- ✅ **Sin límite**: Guarda tantas recetas como quieras&#13;&#10;- ✅ **Orden cronológico**: Las más recientes aparecen primero&#13;&#10;- ✅ **Búsqueda rápida**: Encuentra favoritos fácilmente&#13;&#10;&#13;&#10;###  Estados de la Pantalla de Favoritos&#13;&#10;&#13;&#10;####  **Con Favoritos**&#13;&#10;```&#13;&#10;┌─────────────────────────────┐&#13;&#10;│        Mis Favoritos        │&#13;&#10;├─────────────────────────────┤&#13;&#10;│ ️ Pasta Carbonara     ❤️  │&#13;&#10;│    Italian • Meal           │&#13;&#10;├─────────────────────────────┤&#13;&#10;│ ️ Mojito             ❤️  │&#13;&#10;│    Cocktail • Drink         │&#13;&#10;└─────────────────────────────┘&#13;&#10;```&#13;&#10;&#13;&#10;####  **Sin Favoritos**&#13;&#10;```&#13;&#10;┌─────────────────────────────┐&#13;&#10;│        Mis Favoritos        │&#13;&#10;├─────────────────────────────┤&#13;&#10;│                             │&#13;&#10;│         ❤️ (grande)         │&#13;&#10;│                             │&#13;&#10;│   No tienes favoritos aún   │&#13;&#10;│                             │&#13;&#10;│  Explora recetas y marca    │&#13;&#10;│  tus favoritas tocando      │&#13;&#10;│     el corazón ❤️           │&#13;&#10;│                             │&#13;&#10;└─────────────────────────────┘&#13;&#10;```&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;## ️ Estados de la Aplicación&#13;&#10;&#13;&#10;### Indicadores Visuales&#13;&#10;&#13;&#10;| Estado | Símbolo | Descripción | Acción |&#13;&#10;|--------|---------|-------------|---------|&#13;&#10;| **Cargando** |  | Datos en proceso | Esperar |&#13;&#10;| **Favorito Activo** | ❤️ | Receta guardada | Toca para quitar |&#13;&#10;| **Favorito Inactivo** |  | Receta no guardada | Toca para agregar |&#13;&#10;| **Sin Resultados** |  | No hay coincidencias | Probar otra búsqueda |&#13;&#10;| **Error de Red** | ⚠️ | Problema conexión | Reintentar |&#13;&#10;| **Favoritos Vacíos** |  | Sin favoritos guardados | Explorar recetas |&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  Tips y Trucos&#13;&#10;&#13;&#10;###  **Para Búsquedas Efectivas**&#13;&#10;- ✅ **Usa términos simples**: &quot;chicken&quot; mejor que &quot;pollo con verduras&quot;&#13;&#10;- ✅ **Prueba en inglés**: Las APIs funcionan mejor en inglés&#13;&#10;- ✅ **Sé específico**: &quot;pasta&quot; mejor que &quot;comida italiana&quot;&#13;&#10;- ✅ **Experimenta**: Prueba variaciones de la palabra&#13;&#10;&#13;&#10;### ❤️ **Para Gestionar Favoritos**&#13;&#10;- ️ **Organiza mentalmente**: Agrupa por tipo de ocasión&#13;&#10;-  **Úsalos offline**: Perfectos para cocinar sin internet&#13;&#10;-  **Limpia periódicamente**: Elimina recetas que ya no uses&#13;&#10;-  **Sincroniza**: Los cambios son instantáneos&#13;&#10;&#13;&#10;###  **Para Navegación Rápida**&#13;&#10;-  **Barra inferior**: Siempre accesible desde cualquier pantalla&#13;&#10;- ← **Botón atrás**: Consistente en toda la aplicación&#13;&#10;-  **Gestos**: Deslizar para actualizar sugerencias&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  Solución de Problemas&#13;&#10;&#13;&#10;###  **Búsqueda no Funciona**&#13;&#10;**Posibles causas y soluciones:**&#13;&#10;- ❌ **Sin internet**: Verifica tu conexión WiFi/datos&#13;&#10;- ❌ **Término no existe**: Prueba palabras más comunes&#13;&#10;- ❌ **Error temporal**: Espera un momento y reintenta&#13;&#10;- ❌ **App congelada**: Cierra y reopena la aplicación&#13;&#10;&#13;&#10;### ❤️ **Favoritos no se Guardan**&#13;&#10;**Pasos para solucionarlo:**&#13;&#10;1. ✅ **Verifica el corazón**: Debe ponerse rojo al tocarlo&#13;&#10;2. ✅ **Espacio disponible**: Asegúrate de tener memoria libre&#13;&#10;3. ✅ **Reinicia la app**: Cierra completamente y reabre&#13;&#10;4. ✅ **Verifica permisos**: La app debe poder escribir datos&#13;&#10;&#13;&#10;###  **Aplicación Lenta**&#13;&#10;**Optimización recomendada:**&#13;&#10;1. ✅ **Cierra otras apps**: Libera memoria RAM&#13;&#10;2. ✅ **Verifica conexión**: Internet lento afecta carga&#13;&#10;3. ✅ **Reinicia dispositivo**: Limpia caché del sistema&#13;&#10;4. ✅ **Espacio libre**: Mantén al menos 500MB disponible&#13;&#10;&#13;&#10;### ️ **Imágenes no Cargan**&#13;&#10;**Soluciones posibles:**&#13;&#10;- ✅ **Conexión lenta**: Espera más tiempo&#13;&#10;- ✅ **Datos móviles**: Verifica que no estés en modo ahorro&#13;&#10;- ✅ **Caché lleno**: Reinicia la aplicación&#13;&#10;- ✅ **Error temporal**: Las imágenes externas pueden fallar&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  Soporte y Ayuda&#13;&#10;&#13;&#10;###  **¿Necesitas Más Ayuda?**&#13;&#10;Si ninguna de estas soluciones funciona:&#13;&#10;&#13;&#10;1.  **Contacto**: Envía un email con tu problema específico&#13;&#10;2.  **Reporta bugs**: Describe paso a paso lo que pasó&#13;&#10;3.  **Sugerencias**: Comparte ideas para mejorar la app&#13;&#10;4. ⭐ **Valoración**: Deja tu reseña en la tienda de apps&#13;&#10;&#13;&#10;###  **Información del Sistema**&#13;&#10;Para reportar problemas, incluye:&#13;&#10;- Modelo de tu dispositivo&#13;&#10;- Versión de Android&#13;&#10;- Versión de la aplicación&#13;&#10;- Descripción detallada del problema&#13;&#10;&#13;&#10;---&#13;&#10;&#13;&#10;##  ¡Disfruta Cocinando!&#13;&#10;&#13;&#10;**FlavorFusion2** está diseñada para hacer que descubrir y guardar recetas sea **fácil, rápido y divertido**. &#13;&#10;&#13;&#10;✨ **Con el nuevo sistema de favoritos**, nunca perderás esa receta perfecta que encontraste.&#13;&#10;&#13;&#10;‍ **¡Feliz cocina y que disfrutes explorando el mundo de los sabores!** ️✨" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/doc/objetivo-y-funcionalidades.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/doc/objetivo-y-funcionalidades.md" />
              <option name="originalContent" value="# FlavorFusion2 - Objetivo y Funcionalidades&#10;&#10;##  Objetivo de la Aplicación&#10;&#10;**FlavorFusion2** es una aplicación móvil desarrollada en Android que permite a los usuarios descubrir, explorar y gestionar recetas de comidas y bebidas de manera intuitiva y personalizada. La aplicación está diseñada para ser el compañero perfecto para amantes de la cocina y mixología.&#10;&#10;##  Funcionalidades Principales&#10;&#10;### 1.  Pantalla de Inicio&#10;- **Sugerencias Aleatorias**: Muestra una comida y bebida destacada del día&#10;- **Navegación Rápida**: Acceso directo a las secciones principales&#10;- **Interfaz Atractiva**: Diseño moderno con Material Design 3&#10;&#10;### 2.  Exploración de Recetas&#10;&#10;#### ️ Explorar Comidas&#10;- **Búsqueda Inteligente**: Busca recetas por nombre con soporte para:&#10;  - Botón de búsqueda integrado&#10;  - Tecla Enter para ejecutar búsqueda&#10;  - Limpieza automática de resultados&#10;- **Sugerencias Diarias**: Comidas destacadas y aleatorias&#10;- **Resultados Visuales**: Tarjetas con imágenes, nombres y categorías&#10;- **Estados de Carga**: Indicadores visuales durante la búsqueda&#10;&#10;####  Explorar Bebidas&#10;- **Búsqueda Especializada**: Encuentra bebidas por nombre&#10;- **Categorización**: Diferenciación entre bebidas alcohólicas y no alcohólicas&#10;- **Información Detallada**: Tipo de vaso, ingredientes y preparación&#10;- **Interfaz Consistente**: Misma experiencia de usuario que en comidas&#10;&#10;### 3.  Detalles de Recetas&#10;- **Vista Completa**: Información detallada de cada receta&#10;- **Ingredientes**: Lista completa con cantidades&#10;- **Instrucciones**: Pasos de preparación claros&#10;- **Imágenes**: Visualización de alta calidad&#10;- **Información Nutricional**: País de origen, categoría, etc.&#10;&#10;### 4. ❤️ Sistema de Favoritos&#10;- **Gestión Personalizada**: Marca y desmarca recetas como favoritas&#10;- **Almacenamiento Local**: Base de datos Room para persistencia&#10;- **Acceso Rápido**: Pantalla dedicada para favoritos&#10;- **Sincronización**: Estado de favoritos actualizado en tiempo real&#10;&#10;### 5.  Integración con APIs Externas&#10;- **TheMealDB API**: Para recetas de comidas&#10;- **TheCocktailDB API**: Para recetas de bebidas&#10;- **Datos en Tiempo Real**: Información actualizada y variada&#10;- **Manejo de Errores**: Gestión elegante de fallos de conexión&#10;&#10;## ️ Características Técnicas&#10;&#10;### Arquitectura&#10;- **MVVM Pattern**: Separación clara de responsabilidades&#10;- **Dependency Injection**: Hilt para gestión de dependencias&#10;- **Room Database**: Almacenamiento local eficiente&#10;- **Retrofit**: Cliente HTTP para APIs REST&#10;- **Jetpack Compose**: UI moderna y declarativa&#10;&#10;### Gestión de Estado&#10;- **StateFlow**: Manejo reactivo del estado&#10;- **Coroutines**: Programación asíncrona eficiente&#10;- **Error Handling**: Manejo robusto de excepciones&#10;- **Loading States**: Estados de carga para mejor UX&#10;&#10;### Navegación&#10;- **Jetpack Navigation**: Navegación fluida entre pantallas&#10;- **Bottom Navigation**: Acceso rápido a secciones principales&#10;- **Back Stack Management**: Navegación intuitiva&#10;&#10;##  Experiencia de Usuario&#10;&#10;### Diseño&#10;- **Material Design 3**: Estética moderna y consistente&#10;- **Responsive Layout**: Adaptable a diferentes tamaños de pantalla&#10;- **Dark/Light Theme**: Soporte para temas del sistema&#10;- **Animaciones Fluidas**: Transiciones suaves entre estados&#10;&#10;### Usabilidad&#10;- **Búsqueda Intuitiva**: Múltiples formas de iniciar búsquedas&#10;- **Feedback Visual**: Indicadores claros de estado&#10;- **Mensajes Informativos**: Comunicación clara con el usuario&#10;- **Accesibilidad**: Soporte para lectores de pantalla&#10;&#10;##  Valor Agregado&#10;&#10;1. **Descubrimiento Diario**: Nuevas recetas cada día&#10;2. **Búsqueda Eficiente**: Encuentra exactamente lo que buscas&#10;3. **Personalización**: Sistema de favoritos personalizado&#10;4. **Offline First**: Favoritos disponibles sin conexión&#10;5. **Performance**: Carga rápida y respuesta fluida&#10;6. **Escalabilidad**: Arquitectura preparada para nuevas funcionalidades&#10;&#10;##  Público Objetivo&#10;&#10;- **Cocineros Aficionados**: Personas que disfrutan cocinar en casa&#10;- **Bartenders**: Profesionales y aficionados de la mixología&#10;- **Exploradores Culinarios**: Usuarios que buscan nuevas experiencias&#10;- **Organizadores de Eventos**: Para planificar menús y bebidas&#10;- **Estudiantes de Gastronomía**: Como herramienta de aprendizaje&#10;&#10;La aplicación FlavorFusion2 combina funcionalidad, diseño y performance para ofrecer una experiencia completa en el mundo de las recetas digitales.&#10;" />
              <option name="updatedContent" value="# FlavorFusion2 - Objetivo y Funcionalidades&#13;&#10;&#13;&#10;##  Objetivo de la Aplicación&#13;&#10;&#13;&#10;**FlavorFusion2** es una aplicación móvil desarrollada en Android que permite a los usuarios descubrir, explorar y gestionar recetas de comidas y bebidas de manera intuitiva y personalizada. La aplicación está diseñada para ser el compañero perfecto para amantes de la cocina y mixología.&#13;&#10;&#13;&#10;##  Funcionalidades Principales&#13;&#10;&#13;&#10;### 1.  Pantalla de Inicio&#13;&#10;- **Sugerencias Aleatorias**: Muestra una comida y bebida destacada del día&#13;&#10;- **Navegación Rápida**: Acceso directo a las secciones principales&#13;&#10;- **Interfaz Atractiva**: Diseño moderno con Material Design 3&#13;&#10;&#13;&#10;### 2.  Exploración de Recetas&#13;&#10;&#13;&#10;#### ️ Explorar Comidas&#13;&#10;- **Búsqueda Inteligente**: Busca recetas por nombre con soporte para:&#13;&#10;  - Botón de búsqueda integrado&#13;&#10;  - Tecla Enter para ejecutar búsqueda&#13;&#10;  - Limpieza automática de resultados&#13;&#10;- **Sugerencias Diarias**: Comidas destacadas y aleatorias&#13;&#10;- **Resultados Visuales**: Tarjetas con imágenes, nombres y categorías&#13;&#10;- **Estados de Carga**: Indicadores visuales durante la búsqueda&#13;&#10;&#13;&#10;####  Explorar Bebidas&#13;&#10;- **Búsqueda Especializada**: Encuentra bebidas por nombre&#13;&#10;- **Categorización**: Diferenciación entre bebidas alcohólicas y no alcohólicas&#13;&#10;- **Información Detallada**: Tipo de vaso, ingredientes y preparación&#13;&#10;- **Interfaz Consistente**: Misma experiencia de usuario que en comidas&#13;&#10;&#13;&#10;### 3.  Detalles de Recetas&#13;&#10;- **Vista Completa**: Información detallada de cada receta&#13;&#10;- **Ingredientes**: Lista completa con cantidades&#13;&#10;- **Instrucciones**: Pasos de preparación claros&#13;&#10;- **Imágenes**: Visualización de alta calidad&#13;&#10;- **Información Contextual**: País de origen, categoría, tipo de vaso&#13;&#10;&#13;&#10;### 4. ❤️ Sistema de Favoritos ⭐ **¡IMPLEMENTADO!**&#13;&#10;- **Gestión Personalizada**: Marca y desmarca recetas como favoritas con un toque&#13;&#10;- **Almacenamiento Local**: Base de datos Room SQLite para persistencia offline&#13;&#10;- **Pantalla Dedicada**: Sección completa para gestionar favoritos&#13;&#10;- **Sincronización en Tiempo Real**: Estado actualizado instantáneamente en toda la app&#13;&#10;- **Acceso Offline**: Consulta favoritos sin conexión a internet&#13;&#10;- **Estado Visual**: Corazón rojo/gris indica el estado de favorito&#13;&#10;- **Eliminar Favoritos**: Fácil eliminación desde la pantalla de favoritos&#13;&#10;&#13;&#10;### 5.  Integración con APIs Externas&#13;&#10;- **TheMealDB API**: Para recetas de comidas internacionales&#13;&#10;- **TheCocktailDB API**: Para recetas de bebidas y cócteles&#13;&#10;- **Datos en Tiempo Real**: Información actualizada y variada&#13;&#10;- **Manejo de Errores**: Gestión elegante de fallos de conexión&#13;&#10;- **Traducción Automática**: Soporte para búsquedas en español&#13;&#10;&#13;&#10;## ️ Características Técnicas&#13;&#10;&#13;&#10;### ️ Arquitectura&#13;&#10;- **Patrón MVVM**: Separación clara de responsabilidades&#13;&#10;- **Repository Pattern**: Abstracción de fuentes de datos&#13;&#10;- **Dependency Injection**: Hilt para gestión automatizada&#13;&#10;- **Single Source of Truth**: Estado centralizado con Flow&#13;&#10;&#13;&#10;###  Persistencia de Datos&#13;&#10;- **Room Database**: Base de datos SQLite local&#13;&#10;- **Entidades Room**: Modelo optimizado para favoritos&#13;&#10;- **DAOs**: Operaciones de base de datos tipadas y seguras&#13;&#10;- **Migraciones**: Versionado de esquema de base de datos&#13;&#10;&#13;&#10;###  Conectividad&#13;&#10;- **Retrofit**: Cliente HTTP moderno&#13;&#10;- **Gson**: Serialización/deserialización JSON&#13;&#10;- **Coroutines**: Operaciones asíncronas no bloqueantes&#13;&#10;- **Flow**: Streams reactivos para datos en tiempo real&#13;&#10;&#13;&#10;###  Interfaz de Usuario&#13;&#10;- **Jetpack Compose**: UI declarativa moderna&#13;&#10;- **Material Design 3**: Sistema de diseño actualizado&#13;&#10;- **Navegación**: Navigation Compose para flujos fluidos&#13;&#10;- **Estados Reactivos**: UI que reacciona a cambios de datos&#13;&#10;&#13;&#10;###  Experiencia de Usuario&#13;&#10;- **Estados de Carga**: Indicadores visuales claros&#13;&#10;- **Manejo de Errores**: Mensajes informativos y acciones de recuperación&#13;&#10;- **Navegación Intuitiva**: Flujos lógicos entre pantallas&#13;&#10;- **Accesibilidad**: Soporte para lectores de pantalla&#13;&#10;&#13;&#10;##  Funcionalidades Avanzadas&#13;&#10;&#13;&#10;###  Búsqueda Inteligente&#13;&#10;- **Autocompletado**: Sugerencias mientras escribes&#13;&#10;- **Filtrado**: Búsqueda específica por tipo de receta&#13;&#10;- **Historial**: Búsquedas recientes (futuro)&#13;&#10;- **Favoritos Rápidos**: Acceso directo desde búsqueda&#13;&#10;&#13;&#10;###  Gestión de Estado&#13;&#10;- **Estado Reactivo**: Cambios instantáneos en toda la app&#13;&#10;- **Caché Inteligente**: Minimiza llamadas de red&#13;&#10;- **Sincronización**: Estado consistente entre pantallas&#13;&#10;- **Persistencia**: Datos guardados automáticamente&#13;&#10;&#13;&#10;### ️ Robustez&#13;&#10;- **Manejo de Errores**: Recuperación elegante de fallos&#13;&#10;- **Validación**: Entrada de datos segura&#13;&#10;- **Testing**: Cobertura de pruebas unitarias&#13;&#10;- **Logging**: Trazabilidad para debugging&#13;&#10;&#13;&#10;##  Objetivos de Diseño&#13;&#10;&#13;&#10;###  Centrado en el Usuario&#13;&#10;- **Simplicidad**: Interfaz clara y directa&#13;&#10;- **Eficiencia**: Acceso rápido a funciones principales&#13;&#10;- **Personalización**: Favoritos como experiencia personal&#13;&#10;- **Descubrimiento**: Facilita encontrar nuevas recetas&#13;&#10;&#13;&#10;###  Rendimiento&#13;&#10;- **Carga Rápida**: Optimización de tiempos de respuesta&#13;&#10;- **Uso Eficiente**: Minimiza consumo de datos y batería&#13;&#10;- **Experiencia Fluida**: Transiciones suaves&#13;&#10;- **Escalabilidad**: Preparado para crecimiento futuro&#13;&#10;&#13;&#10;###  Mantenibilidad&#13;&#10;- **Código Limpio**: Arquitectura bien estructurada&#13;&#10;- **Modularidad**: Componentes reutilizables&#13;&#10;- **Documentación**: Código autodocumentado&#13;&#10;- **Extensibilidad**: Fácil agregar nuevas funciones&#13;&#10;&#13;&#10;##  Métricas de Éxito&#13;&#10;&#13;&#10;### ✅ Funcionalidad&#13;&#10;- [x] Búsqueda de recetas funcionando&#13;&#10;- [x] Sistema de favoritos completo&#13;&#10;- [x] Navegación fluida entre pantallas&#13;&#10;- [x] Manejo robusto de errores&#13;&#10;- [x] Persistencia offline de favoritos&#13;&#10;&#13;&#10;###  Rendimiento&#13;&#10;- [x] Tiempo de carga &lt; 3 segundos&#13;&#10;- [x] Transiciones fluidas&#13;&#10;- [x] Uso eficiente de memoria&#13;&#10;- [x] Gestión inteligente de caché&#13;&#10;&#13;&#10;###  Experiencia de Usuario&#13;&#10;- [x] Interfaz intuitiva&#13;&#10;- [x] Feedback visual claro&#13;&#10;- [x] Estados de error informativos&#13;&#10;- [x] Acceso offline a favoritos&#13;&#10;&#13;&#10;##  Roadmap Futuro&#13;&#10;&#13;&#10;###  Próximas Funcionalidades&#13;&#10;- [ ] **Categorías**: Filtrado por tipo de comida/bebida&#13;&#10;- [ ] **Filtros Avanzados**: Por ingredientes, tiempo de cocción&#13;&#10;- [ ] **Notas Personales**: Comentarios en recetas favoritas&#13;&#10;- [ ] **Lista de Compras**: Generación automática desde recetas&#13;&#10;- [ ] **Temporizador**: Para tiempos de cocción&#13;&#10;- [ ] **Compartir**: Recetas con amigos&#13;&#10;&#13;&#10;###  Mejoras de Conectividad&#13;&#10;- [ ] **Modo Offline**: Caché inteligente de recetas&#13;&#10;- [ ] **Sincronización**: Favoritos en la nube&#13;&#10;- [ ] **APIs Adicionales**: Más fuentes de recetas&#13;&#10;- [ ] **Búsqueda por Imagen**: Reconocimiento de platos&#13;&#10;&#13;&#10;###  Mejoras de UI/UX&#13;&#10;- [ ] **Tema Oscuro**: Soporte completo&#13;&#10;- [ ] **Animaciones**: Transiciones más fluidas&#13;&#10;- [ ] **Gestos**: Navegación por swipe&#13;&#10;- [ ] **Widgets**: Acceso rápido desde home screen" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>