<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaCarga.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaCarga.kt" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import kotlinx.coroutines.delay&#10;&#10;@Composable&#10;fun PantallaCarga(&#10;    onNavigateToHome: () -&gt; Unit&#10;) {&#10;    // Efecto para navegar automáticamente después de 3 segundos&#10;    LaunchedEffect(Unit) {&#10;        delay(3000) // 3 segundos de duración&#10;        onNavigateToHome()&#10;    }&#10;&#10;    // Fondo con gradiente&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        MaterialTheme.colorScheme.primary,&#10;                        MaterialTheme.colorScheme.secondary&#10;                    )&#10;                )&#10;            ),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            // Logo principal&#10;            Image(&#10;                painter = painterResource(id = R.drawable.fusiondesabores),&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(200.dp)&#10;                    .padding(bottom = 32.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Texto de bienvenida&#10;            Text(&#10;                text = &quot;FlavorFusion&quot;,&#10;                style = MaterialTheme.typography.headlineLarge.copy(&#10;                    fontSize = 32.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                ),&#10;                color = MaterialTheme.colorScheme.onPrimary&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Text(&#10;                text = &quot;Descubre Sabores Únicos&quot;,&#10;                style = MaterialTheme.typography.titleMedium,&#10;                color = MaterialTheme.colorScheme.onPrimary.copy(alpha = 0.8f)&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarBebidas.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarBebidas.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarBebidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Bebidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_transparente),&#10;                contentDescription = &quot;Logo&quot;,&#10;                modifier = Modifier&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 16.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar bebidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: mojito, coffee, beer&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarBebidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarBebidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando bebidas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaBebidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaBebidas) { receta -&gt;&#10;                            TarjetaRecetaBebida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;drink&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaBebidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron bebidas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'mojito', 'coffee' o 'beer'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Bebidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu bebida favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarBebidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaBebida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Tipo: ${receta.area}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarBebidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Bebidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.ic_logo_flavorfusion),&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(100.dp)&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 24.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar bebidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: mojito, coffee, beer&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = { &#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = { &#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarBebidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarBebidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando bebidas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                uiState.resultadosBusquedaBebidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaBebidas) { receta -&gt;&#10;                            TarjetaRecetaBebida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;drink&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaBebidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron bebidas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'mojito', 'coffee' o 'beer'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;                &#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Bebidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu bebida favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { &#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarBebidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaBebida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;            &#10;            Spacer(modifier = Modifier.width(12.dp))&#10;            &#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;                &#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;                &#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = &quot;Tipo: ${receta.area}&quot;,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;            &#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarComidas.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaExplorarComidas.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarComidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Comidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar comidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: pasta, chicken, pizza&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = {&#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = {&#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarComidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarComidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando recetas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.resultadosBusquedaComidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaComidas) { receta -&gt;&#10;                            TarjetaRecetaComida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;meal&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaComidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron recetas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'pasta', 'chicken' o 'beef'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Comidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu receta favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = {&#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarComidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaComida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.text.KeyboardActions&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.ImeAction&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaExplorarComidas(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateToDetail: (String, String) -&gt; Unit,&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val uiState by viewModel.estadoUI.collectAsState()&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Explorar Comidas&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo&#10;            Image(&#10;                painter = painterResource(id = R.drawable.fusiondesabores),&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(100.dp)&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 24.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Barra de búsqueda&#10;            OutlinedTextField(&#10;                value = searchQuery,&#10;                onValueChange = { searchQuery = it },&#10;                label = { Text(&quot;Buscar comidas...&quot;) },&#10;                placeholder = { Text(&quot;Ej: pasta, chicken, pizza&quot;) },&#10;                leadingIcon = {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                },&#10;                trailingIcon = {&#10;                    if (searchQuery.isNotEmpty()) {&#10;                        IconButton(onClick = {&#10;                            searchQuery = &quot;&quot;&#10;                            viewModel.limpiarResultadosBusqueda()&#10;                        }) {&#10;                            Icon(Icons.Default.Clear, contentDescription = &quot;Limpiar&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),&#10;                keyboardActions = KeyboardActions(&#10;                    onSearch = {&#10;                        if (searchQuery.isNotBlank()) {&#10;                            viewModel.buscarComidas(searchQuery)&#10;                        }&#10;                    }&#10;                ),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // Botón de búsqueda&#10;            if (searchQuery.isNotBlank()) {&#10;                Button(&#10;                    onClick = { viewModel.buscarComidas(searchQuery) },&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(bottom = 16.dp)&#10;                ) {&#10;                    Icon(Icons.Default.Search, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;Buscar&quot;)&#10;                }&#10;            }&#10;&#10;            // Contenido principal&#10;            when {&#10;                uiState.estaBuscando -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            CircularProgressIndicator()&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&quot;Buscando recetas...&quot;)&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.resultadosBusquedaComidas.isNotEmpty() -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        items(uiState.resultadosBusquedaComidas) { receta -&gt;&#10;                            TarjetaRecetaComida(&#10;                                receta = receta,&#10;                                esFavorito = uiState.favoritosIds.contains(receta.id),&#10;                                onClick = { onNavigateToDetail(receta.id, &quot;meal&quot;) },&#10;                                onFavoritoClick = { viewModel.alternarFavorito(receta) }&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                searchQuery.isNotBlank() &amp;&amp; uiState.resultadosBusquedaComidas.isEmpty() &amp;&amp; !uiState.estaBuscando -&gt; {&#10;                    // Sin resultados&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.SearchOff,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;No se encontraron recetas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Intenta con otros términos como 'pasta', 'chicken' o 'beef'&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                else -&gt; {&#10;                    // Estado inicial&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(64.dp),&#10;                                tint = MaterialTheme.colorScheme.primary&#10;                            )&#10;                            Spacer(modifier = Modifier.height(16.dp))&#10;                            Text(&#10;                                text = &quot;Descubre Comidas Deliciosas&quot;,&#10;                                style = MaterialTheme.typography.headlineSmall,&#10;                                textAlign = TextAlign.Center&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Busca tu receta favorita escribiendo el nombre arriba&quot;,&#10;                                style = MaterialTheme.typography.bodyMedium,&#10;                                textAlign = TextAlign.Center,&#10;                                color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            uiState.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = {&#10;                                viewModel.limpiarError()&#10;                                if (searchQuery.isNotBlank()) {&#10;                                    viewModel.buscarComidas(searchQuery)&#10;                                }&#10;                            }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaRecetaComida(&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier&#10;                    .size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onFavoritoClick) {&#10;                Icon(&#10;                    imageVector = if (esFavorito) Icons.Default.Favorite else Icons.Default.FavoriteBorder,&#10;                    contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                    tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaFavoritos.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaFavoritos.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.RestaurantMenu&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaFavoritos(&#10;    onRecetaClick: (String, String) -&gt; Unit,&#10;    viewModel: InicioViewModel = hiltViewModel()&#10;) {&#10;    val favoritos by viewModel.favoritos.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;    ) {&#10;        // Título&#10;        Text(&#10;            text = &quot;Mis Favoritos&quot;,&#10;            style = MaterialTheme.typography.headlineMedium,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        if (favoritos.isEmpty()) {&#10;            // Estado vacío&#10;            Column(&#10;                modifier = Modifier.fillMaxSize(),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.Center&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(64.dp),&#10;                    tint = MaterialTheme.colorScheme.outline&#10;                )&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;No tienes favoritos aún&quot;,&#10;                    style = MaterialTheme.typography.headlineSmall,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = &quot;Explora recetas y marca tus favoritas tocando el corazón ❤️&quot;,&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.padding(horizontal = 32.dp)&#10;                )&#10;            }&#10;        } else {&#10;            // Lista de favoritos&#10;            LazyColumn(&#10;                verticalArrangement = Arrangement.spacedBy(12.dp)&#10;            ) {&#10;                items(favoritos) { receta -&gt;&#10;                    TarjetaFavorito(&#10;                        receta = receta,&#10;                        onClick = { onRecetaClick(receta.id, receta.tipo) },&#10;                        onToggleFavorito = { viewModel.alternarFavorito(receta) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaFavorito(&#10;    receta: Receta,&#10;    onClick: () -&gt; Unit,&#10;    onToggleFavorito: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier.size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // Indicador de tipo&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.RestaurantMenu,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = if (receta.tipo == &quot;meal&quot;) &quot;Comida&quot; else &quot;Bebida&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onToggleFavorito) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Quitar de favoritos&quot;,&#10;                    tint = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Favorite&#10;import androidx.compose.material.icons.filled.RestaurantMenu&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.stringResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.model.Receta&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaFavoritos(&#10;    onRecetaClick: (String, String) -&gt; Unit,&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    onNavigateUp: () -&gt; Unit&#10;) {&#10;    val favoritos by viewModel.favoritos.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Mis Favoritos&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onNavigateUp) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Regresar&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            if (favoritos.isEmpty()) {&#10;                // Estado vacío&#10;                Column(&#10;                    modifier = Modifier.fillMaxSize(),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Favorite,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(64.dp),&#10;                        tint = MaterialTheme.colorScheme.outline&#10;                    )&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                    Text(&#10;                        text = &quot;No tienes favoritos aún&quot;,&#10;                        style = MaterialTheme.typography.headlineSmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center&#10;                    )&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;Explora recetas y marca tus favoritas tocando el corazón ❤️&quot;,&#10;                        style = MaterialTheme.typography.bodyMedium,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.padding(horizontal = 32.dp)&#10;                    )&#10;                }&#10;            } else {&#10;                // Lista de favoritos&#10;                LazyColumn(&#10;                    verticalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    items(favoritos) { receta -&gt;&#10;                        TarjetaFavorito(&#10;                            receta = receta,&#10;                            onClick = { onRecetaClick(receta.id, receta.tipo) },&#10;                            onToggleFavorito = { viewModel.alternarFavorito(receta) }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaFavorito(&#10;    receta: Receta,&#10;    onClick: () -&gt; Unit,&#10;    onToggleFavorito: () -&gt; Unit&#10;) {&#10;    Card(&#10;        onClick = onClick,&#10;        modifier = Modifier.fillMaxWidth()&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(12.dp),&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // Imagen&#10;            AsyncImage(&#10;                model = receta.imagen,&#10;                contentDescription = receta.nombre,&#10;                modifier = Modifier.size(80.dp),&#10;                contentScale = ContentScale.Crop&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(12.dp))&#10;&#10;            // Información&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = receta.nombre,&#10;                    style = MaterialTheme.typography.titleMedium,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;&#10;                if (receta.categoria.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.categoria,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                if (receta.area.isNotBlank()) {&#10;                    Text(&#10;                        text = receta.area,&#10;                        style = MaterialTheme.typography.bodySmall,&#10;                        color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                    )&#10;                }&#10;&#10;                // Indicador de tipo&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.RestaurantMenu,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp),&#10;                        tint = MaterialTheme.colorScheme.primary&#10;                    )&#10;                    Spacer(modifier = Modifier.width(4.dp))&#10;                    Text(&#10;                        text = if (receta.tipo == &quot;meal&quot;) &quot;Comida&quot; else &quot;Bebida&quot;,&#10;                        style = MaterialTheme.typography.labelSmall,&#10;                        color = MaterialTheme.colorScheme.primary&#10;                    )&#10;                }&#10;            }&#10;&#10;            // Botón de favorito&#10;            IconButton(onClick = onToggleFavorito) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Favorite,&#10;                    contentDescription = &quot;Quitar de favoritos&quot;,&#10;                    tint = MaterialTheme.colorScheme.error&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/screens/PantallaInicio.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Flavor Fusion&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Título de bienvenida&#10;            Text(&#10;                text = &quot;¡Descubre Nuevos Sabores!&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                // Comida sugerida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Comida del Día&quot;,&#10;                        receta = comida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Bebida sugerida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Bebida del Día&quot;,&#10;                        receta = bebida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;&#10;                // Botones de navegación&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Botón explorar comidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarAComidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Comidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Botón explorar bebidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarABebidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Bebidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            estadoUI.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaSugerencia(&#10;    titulo: String,&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onRecetaClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = titulo,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onRecetaClick() }&#10;        ) {&#10;            Column {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = receta.imagen,&#10;                        contentDescription = receta.nombre,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Botón de favorito flotante&#10;                    IconButton(&#10;                        onClick = onFavoritoClick,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                                RoundedCornerShape(50)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.categoria,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.area,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.screens&#10;&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.layout.ContentScale&#10;import androidx.compose.ui.res.painterResource&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import coil.compose.AsyncImage&#10;import com.rodrigoangeloni.flavorfusion.R&#10;import com.rodrigoangeloni.flavorfusion.viewmodels.InicioViewModel&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun PantallaInicio(&#10;    viewModel: InicioViewModel = hiltViewModel(),&#10;    navegarAComidas: () -&gt; Unit,&#10;    navegarABebidas: () -&gt; Unit,&#10;    navegarAFavoritos: () -&gt; Unit,&#10;    navegarADetalleReceta: (String, String) -&gt; Unit&#10;) {&#10;    val estadoUI by viewModel.estadoUI.collectAsState()&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Flavor Fusion&quot;) },&#10;                actions = {&#10;                    IconButton(onClick = navegarAFavoritos) {&#10;                        Icon(Icons.Default.Favorite, contentDescription = &quot;Favoritos&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .verticalScroll(rememberScrollState())&#10;                .padding(16.dp)&#10;        ) {&#10;            // Logo personalizado&#10;            Image(&#10;                painter = painterResource(id = R.drawable.logo_personalizado), // Cambia &quot;logo_personalizado&quot; por el nombre de tu archivo PNG&#10;                contentDescription = &quot;FlavorFusion Logo&quot;,&#10;                modifier = Modifier&#10;                    .size(120.dp)&#10;                    .align(Alignment.CenterHorizontally)&#10;                    .padding(bottom = 16.dp),&#10;                contentScale = ContentScale.Fit&#10;            )&#10;&#10;            // Título de bienvenida&#10;            Text(&#10;                text = &quot;¡Descubre Nuevos Sabores!&quot;,&#10;                style = MaterialTheme.typography.headlineMedium,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            if (estadoUI.estaCargando) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(200.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    CircularProgressIndicator()&#10;                }&#10;            } else {&#10;                // Comida sugerida&#10;                estadoUI.comidaSugerida?.let { comida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Comida del Día&quot;,&#10;                        receta = comida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(comida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(comida.id, &quot;meal&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(comida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(16.dp))&#10;                }&#10;&#10;                // Bebida sugerida&#10;                estadoUI.bebidaSugerida?.let { bebida -&gt;&#10;                    TarjetaSugerencia(&#10;                        titulo = &quot;Bebida del Día&quot;,&#10;                        receta = bebida,&#10;                        esFavorito = estadoUI.favoritosIds.contains(bebida.id),&#10;                        onRecetaClick = { navegarADetalleReceta(bebida.id, &quot;drink&quot;) },&#10;                        onFavoritoClick = { viewModel.alternarFavorito(bebida) }&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(24.dp))&#10;                }&#10;&#10;                // Botones de navegación&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    // Botón explorar comidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarAComidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.primaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Restaurant,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Comidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onPrimaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    // Botón explorar bebidas&#10;                    Card(&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .clickable { navegarABebidas() },&#10;                        colors = CardDefaults.cardColors(&#10;                            containerColor = MaterialTheme.colorScheme.secondaryContainer&#10;                        )&#10;                    ) {&#10;                        Column(&#10;                            modifier = Modifier.padding(16.dp),&#10;                            horizontalAlignment = Alignment.CenterHorizontally&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.LocalBar,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(32.dp),&#10;                                tint = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                            Spacer(modifier = Modifier.height(8.dp))&#10;                            Text(&#10;                                text = &quot;Explorar Bebidas&quot;,&#10;                                style = MaterialTheme.typography.titleSmall,&#10;                                color = MaterialTheme.colorScheme.onSecondaryContainer&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // Mostrar error si existe&#10;            estadoUI.error?.let { error -&gt;&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = MaterialTheme.colorScheme.errorContainer&#10;                    )&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier.padding(16.dp)&#10;                    ) {&#10;                        Text(&#10;                            text = &quot;Error&quot;,&#10;                            style = MaterialTheme.typography.titleMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer,&#10;                            fontWeight = FontWeight.Bold&#10;                        )&#10;                        Text(&#10;                            text = error,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onErrorContainer&#10;                        )&#10;                        Spacer(modifier = Modifier.height(8.dp))&#10;                        Button(&#10;                            onClick = { viewModel.cargarSugerenciasAleatorias() }&#10;                        ) {&#10;                            Text(&quot;Reintentar&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun TarjetaSugerencia(&#10;    titulo: String,&#10;    receta: com.rodrigoangeloni.flavorfusion.model.Receta,&#10;    esFavorito: Boolean,&#10;    onRecetaClick: () -&gt; Unit,&#10;    onFavoritoClick: () -&gt; Unit&#10;) {&#10;    Column {&#10;        Text(&#10;            text = titulo,&#10;            style = MaterialTheme.typography.titleLarge,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 8.dp)&#10;        )&#10;&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .clickable { onRecetaClick() }&#10;        ) {&#10;            Column {&#10;                Box {&#10;                    AsyncImage(&#10;                        model = receta.imagen,&#10;                        contentDescription = receta.nombre,&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(200.dp),&#10;                        contentScale = ContentScale.Crop&#10;                    )&#10;&#10;                    // Botón de favorito flotante&#10;                    IconButton(&#10;                        onClick = onFavoritoClick,&#10;                        modifier = Modifier&#10;                            .align(Alignment.TopEnd)&#10;                            .padding(8.dp)&#10;                            .background(&#10;                                MaterialTheme.colorScheme.surface.copy(alpha = 0.8f),&#10;                                RoundedCornerShape(50)&#10;                            )&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (esFavorito) Icons.Filled.Favorite else Icons.Filled.FavoriteBorder,&#10;                            contentDescription = if (esFavorito) &quot;Quitar de favoritos&quot; else &quot;Agregar a favoritos&quot;,&#10;                            tint = if (esFavorito) MaterialTheme.colorScheme.error else MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;&#10;                Column(&#10;                    modifier = Modifier.padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = receta.nombre,&#10;                        style = MaterialTheme.typography.titleMedium,&#10;                        fontWeight = FontWeight.Bold&#10;                    )&#10;&#10;                    if (receta.categoria.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.categoria,&#10;                            style = MaterialTheme.typography.bodyMedium,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 4.dp)&#10;                        )&#10;                    }&#10;&#10;                    if (receta.area.isNotBlank()) {&#10;                        Text(&#10;                            text = receta.area,&#10;                            style = MaterialTheme.typography.bodySmall,&#10;                            color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                            modifier = Modifier.padding(top = 2.dp)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/Navegacion.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/rodrigoangeloni/flavorfusion/util/Navegacion.kt" />
              <option name="originalContent" value="package com.rodrigoangeloni.flavorfusion.util&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.navArgument&#10;import androidx.navigation.NavType&#10;import com.rodrigoangeloni.flavorfusion.screens.*&#10;&#10;@Composable&#10;fun NavegacionApp(navController: NavHostController) {&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;carga&quot;&#10;    ) {&#10;        // Pantalla de carga (splash screen)&#10;        composable(&quot;carga&quot;) {&#10;            PantallaCarga(&#10;                onNavigateToHome = {&#10;                    navController.navigate(&quot;inicio&quot;) {&#10;                        // Eliminar la pantalla de carga del stack para que no se pueda volver&#10;                        popUpTo(&quot;carga&quot;) { inclusive = true }&#10;                    }&#10;                }&#10;            )&#10;        }&#10;&#10;        // Pantalla de inicio&#10;        composable(&quot;inicio&quot;) {&#10;            PantallaInicio(&#10;                navegarAComidas = { navController.navigate(&quot;explorar_comidas&quot;) },&#10;                navegarABebidas = { navController.navigate(&quot;explorar_bebidas&quot;) },&#10;                navegarAFavoritos = { navController.navigate(&quot;favoritos&quot;) },&#10;                navegarADetalleReceta = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar comidas&#10;        composable(&quot;explorar_comidas&quot;) {&#10;            PantallaExplorarComidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Explorar bebidas&#10;        composable(&quot;explorar_bebidas&quot;) {&#10;            PantallaExplorarBebidas(&#10;                onNavigateUp = { navController.navigateUp() },&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Pantalla de favoritos&#10;        composable(&quot;favoritos&quot;) {&#10;            PantallaFavoritos(&#10;                onRecetaClick = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#10;            )&#10;        }&#10;&#10;        // Detalle de receta&#10;        composable(&#10;            route = &quot;detalle_receta/{recipeId}/{recipeType}&quot;,&#10;            arguments = listOf(&#10;                navArgument(&quot;recipeId&quot;) { type = NavType.StringType },&#10;                navArgument(&quot;recipeType&quot;) { type = NavType.StringType }&#10;            )&#10;        ) { backStackEntry -&gt;&#10;            val recipeId = backStackEntry.arguments?.getString(&quot;recipeId&quot;) ?: &quot;&quot;&#10;            val recipeType = backStackEntry.arguments?.getString(&quot;recipeType&quot;) ?: &quot;&quot;&#10;&#10;            PantallaDetalleReceta(&#10;                recipeId = recipeId,&#10;                recipeType = recipeType,&#10;                onNavigateUp = { navController.navigateUp() }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.rodrigoangeloni.flavorfusion.util&#13;&#10;&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.navigation.NavHostController&#13;&#10;import androidx.navigation.compose.NavHost&#13;&#10;import androidx.navigation.compose.composable&#13;&#10;import androidx.navigation.navArgument&#13;&#10;import androidx.navigation.NavType&#13;&#10;import com.rodrigoangeloni.flavorfusion.screens.*&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun NavegacionApp(navController: NavHostController) {&#13;&#10;    NavHost(&#13;&#10;        navController = navController,&#13;&#10;        startDestination = &quot;carga&quot;&#13;&#10;    ) {&#13;&#10;        // Pantalla de carga (splash screen)&#13;&#10;        composable(&quot;carga&quot;) {&#13;&#10;            PantallaCarga(&#13;&#10;                onNavigateToHome = {&#13;&#10;                    navController.navigate(&quot;inicio&quot;) {&#13;&#10;                        // Eliminar la pantalla de carga del stack para que no se pueda volver&#13;&#10;                        popUpTo(&quot;carga&quot;) { inclusive = true }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Pantalla de inicio&#13;&#10;        composable(&quot;inicio&quot;) {&#13;&#10;            PantallaInicio(&#13;&#10;                navegarAComidas = { navController.navigate(&quot;explorar_comidas&quot;) },&#13;&#10;                navegarABebidas = { navController.navigate(&quot;explorar_bebidas&quot;) },&#13;&#10;                navegarAFavoritos = { navController.navigate(&quot;favoritos&quot;) },&#13;&#10;                navegarADetalleReceta = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Explorar comidas&#13;&#10;        composable(&quot;explorar_comidas&quot;) {&#13;&#10;            PantallaExplorarComidas(&#13;&#10;                onNavigateUp = { navController.navigateUp() },&#13;&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Explorar bebidas&#13;&#10;        composable(&quot;explorar_bebidas&quot;) {&#13;&#10;            PantallaExplorarBebidas(&#13;&#10;                onNavigateUp = { navController.navigateUp() },&#13;&#10;                onNavigateToDetail = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Pantalla de favoritos&#13;&#10;        composable(&quot;favoritos&quot;) {&#13;&#10;            PantallaFavoritos(&#13;&#10;                onRecetaClick = { id, tipo -&gt; navController.navigate(&quot;detalle_receta/$id/$tipo&quot;) },&#13;&#10;                onNavigateUp = { navController.navigateUp() }&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        // Detalle de receta&#13;&#10;        composable(&#13;&#10;            route = &quot;detalle_receta/{recipeId}/{recipeType}&quot;,&#13;&#10;            arguments = listOf(&#13;&#10;                navArgument(&quot;recipeId&quot;) { type = NavType.StringType },&#13;&#10;                navArgument(&quot;recipeType&quot;) { type = NavType.StringType }&#13;&#10;            )&#13;&#10;        ) { backStackEntry -&gt;&#13;&#10;            val recipeId = backStackEntry.arguments?.getString(&quot;recipeId&quot;) ?: &quot;&quot;&#13;&#10;            val recipeType = backStackEntry.arguments?.getString(&quot;recipeType&quot;) ?: &quot;&quot;&#13;&#10;&#13;&#10;            PantallaDetalleReceta(&#13;&#10;                recipeId = recipeId,&#13;&#10;                recipeType = recipeType,&#13;&#10;                onNavigateUp = { navController.navigateUp() }&#13;&#10;            )&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_logo_flavorfusion.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_logo_flavorfusion.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;120dp&quot;&#10;    android:height=&quot;120dp&quot;&#10;    android:viewportWidth=&quot;120&quot;&#10;    android:viewportHeight=&quot;120&quot;&gt;&#10;    &#10;    &lt;!-- Círculo de fondo --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF6B35&quot;&#10;        android:pathData=&quot;M60,10 A50,50 0 1,1 60,110 A50,50 0 1,1 60,10 Z&quot; /&gt;&#10;    &#10;    &lt;!-- Copa/Vaso --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M40,35 L80,35 L75,75 Q75,80 70,80 L50,80 Q45,80 45,75 L40,35 Z&quot; /&gt;&#10;    &#10;    &lt;!-- Detalle de bebida --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#4CAF50&quot;&#10;        android:pathData=&quot;M42,40 L78,40 L74,65 L46,65 L42,40 Z&quot; /&gt;&#10;    &#10;    &lt;!-- Texto &quot;FF&quot; --&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M25,95 L25,85 L35,85 L35,88 L28,88 L28,90 L33,90 L33,93 L28,93 L28,95 Z&#10;                          M38,95 L38,85 L48,85 L48,88 L41,88 L41,90 L46,90 L46,93 L41,93 L41,95 Z&quot; /&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>